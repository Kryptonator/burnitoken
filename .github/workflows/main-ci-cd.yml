
name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Läuft täglich um Mitternacht, um veraltete Issues zu prüfen
    - cron: '0 0 * * *'
  workflow_dispatch: # Erlaubt manuelle Starts

jobs:
  # ===================================================================
  # JOB 1: Testen, Prüfen & Auditieren
  # Dieser Job läuft bei jedem PR und jedem Push auf Main.
  # ===================================================================
  test-and-audit:
    name: Test, Lint, Audit & Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Code auschecken
        uses: actions/checkout@v4

      - name: 2. Node.js Umgebung aufsetzen
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 3. Abhängigkeiten installieren
        run: npm install

      - name: 4. Code-Formatierung prüfen (Linting)
        # Annahme: Sie haben ein `lint` Skript in package.json
        run: npm run lint --if-present

      - name: 5. Lizenz-Kompatibilität prüfen
        # Annahme: Sie haben ein `license-check` Skript in package.json
        run: npm run license-check --if-present

      - name: 6. Alle Tests ausführen
        run: npm test

      - name: 7. Interne Automatisierungs-Infrastruktur auditieren
        run: node tools/final-automation-audit.js

  # ===================================================================
  # JOB 2: Bauen & Veröffentlichen
  # Dieser Job läuft NUR nach einem erfolgreichen Push auf Main.
  # Er ist vom Erfolg von "test-and-audit" abhängig.
  # ===================================================================
  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-audit # Abhängigkeit von Job 1
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 1. Code auschecken
        uses: actions/checkout@v4

      - name: 2. Node.js Umgebung aufsetzen
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 3. Abhängigkeiten installieren
        run: npm install
      
      - name: 4. Produktions-Build erstellen
        # Annahme: Sie haben ein `build` Skript in package.json
        run: npm run build --if-present

      - name: 5. Auf GitHub Pages veröffentlichen
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Der Ordner, der den Produktions-Build enthält (z.B. 'dist', 'build')
          publish_dir: ./dist 

  # ===================================================================
  # JOB 3: Repository-Verwaltung
  # Dieser Job läuft nach einem Zeitplan, um alte Issues zu schließen.
  # ===================================================================
  manage-repository:
    name: Manage Stale Issues & PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Veraltete Issues und PRs schließen
        uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: 'Dieses Issue ist seit 60 Tagen inaktiv. Es wird aus Gründen der Übersichtlichkeit geschlossen. Bei Bedarf bitte neu öffnen.'
          stale-pr-message: 'Dieser PR ist seit 60 Tagen inaktiv. Er wird aus Gründen der Übersichtlichkeit geschlossen. Bei Bedarf bitte neu erstellen.'
          days-before-stale: 60
          days-before-close: 7
          stale-issue-label: 'stale'
          stale-pr-label: 'stale'
