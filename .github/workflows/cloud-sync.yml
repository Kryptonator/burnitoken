name: Cloud Environment Sync

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '.vscode/**'
      - '**.code-workspace'
  workflow_dispatch:  # Ermöglicht manuelle Ausführung

jobs:
  sync-cloud-settings:
    name: 🔄 Synchronisiere Cloud-Einstellungen
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Überprüfe Änderungen an Einstellungsdateien
        id: check-settings
        run: |
          CHANGED_SETTINGS=$(git diff --name-only HEAD^ HEAD | grep -E '\.vscode/|\.code-workspace$' || echo "")
          echo "Changed settings files: $CHANGED_SETTINGS"
          if [ -n "$CHANGED_SETTINGS" ]; then
            echo "settings_changed=true" >> $GITHUB_OUTPUT
          else
            echo "settings_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 🔄 Aktualisiere Codespaces Präkonfiguration
        if: steps.check-settings.outputs.settings_changed == 'true'
        run: |
          echo "📝 Aktualisiere Codespaces Konfiguration..."
          
          # Erstelle oder aktualisiere .devcontainer/devcontainer.json falls nötig
          if [ -f ".devcontainer/devcontainer.json" ]; then
            # Aktualisiere bestehende devcontainer.json
            echo "Aktualisiere bestehende devcontainer.json"
            jq '.settings = (.settings // {}) * $newSettings' \
              --argjson newSettings "$(cat .vscode/settings.json)" \
              .devcontainer/devcontainer.json > .devcontainer/devcontainer.json.tmp
            mv .devcontainer/devcontainer.json.tmp .devcontainer/devcontainer.json
          else
            # Erstelle Verzeichnis falls es nicht existiert
            mkdir -p .devcontainer
            
            # Erstelle neue devcontainer.json mit Einstellungen
            echo "Erstelle neue devcontainer.json"
            echo '{
              "name": "BurniToken Development Environment",
              "image": "mcr.microsoft.com/devcontainers/javascript-node:20",
              "settings": '"$(cat .vscode/settings.json)"',
              "extensions": '"$(jq -c '.recommendations' .vscode/extensions.json)"',
              "forwardPorts": [3000, 5000, 5500],
              "postCreateCommand": "npm install",
              "features": {
                "ghcr.io/devcontainers/features/node:1": {}
              }
            }' > .devcontainer/devcontainer.json
          fi
          
          # Committe die Änderungen
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .devcontainer/devcontainer.json
          git commit -m "🔄 Aktualisiere Codespaces Konfiguration mit neuesten Extension-Einstellungen" || echo "Keine Änderungen zum Commit"
          git push
      
      - name: 📧 Benachrichtige bestehende Cloud-Umgebungen
        if: steps.check-settings.outputs.settings_changed == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.mail.yahoo.com
          server_port: 465
          username: burn.coin@yahoo.com
          password: ${{ secrets.github }}
          subject: "[BurniToken] Cloud-Einstellungen wurden aktualisiert"
          to: burn.coin@yahoo.com
          from: BurniToken CI <burn.coin@yahoo.com>
          body: |
            ## 🔄 Cloud-Einstellungen aktualisiert
            
            Die VS Code Extension-Einstellungen wurden aktualisiert. Für bestehende Cloud-Umgebungen sollten folgende Schritte ausgeführt werden:
            
            1. Führe `git pull` in deiner Cloud-Umgebung aus
            2. Starte VS Code in der Cloud-Umgebung neu
            3. Oder erstelle eine neue Cloud-Instanz mit dem aktuellen Repository-Stand
            
            ### Geänderte Dateien:
            ```
            ${{ join(steps.check-settings.outputs.changed_files, '\n') }}
            ```
            
            **Hinweis:** Neue Cloud-Umgebungen werden automatisch die neuesten Einstellungen verwenden.
