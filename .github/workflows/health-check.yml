name: Health Check

on:
  schedule:
    - cron: '0 5 * * *' # t√§glich um 5 Uhr UTC
  workflow_dispatch:

jobs:
  health-check:
    name: üå°Ô∏è Health Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: üì• Install dependencies
        run: npm ci || true
      - name: üìù VS Code Settings & Keybindings bereitstellen
        run: |
          mkdir -p $HOME/.config/Code/User
          cp tools/vscode-settings.json $HOME/.config/Code/User/settings.json
          cp tools/vscode-keybindings.json $HOME/.config/Code/User/keybindings.json
          # Log-Verzeichnis f√ºr window is not responding-Check anlegen
          mkdir -p $HOME/.config/Code/logs/fake-log
          echo "[2025-06-29T12:00:00.000Z] window is not responding" > $HOME/.config/Code/logs/fake-log/renderer1.log
      - name: üß© Extension Manager (VS Code)
        if: runner.os == 'Linux' || runner.os == 'macOS' || runner.os == 'Windows'
        run: |
          if command -v code >/dev/null 2>&1; then
            node tools/extension-manager.js --enforce || true
          else
            echo 'VS Code CLI (code) nicht verf√ºgbar, Extension-Check √ºbersprungen.'
          fi
      - name: üßë‚Äçüíª VS Code Self-Healing Manager
        if: runner.os == 'Linux' || runner.os == 'macOS' || runner.os == 'Windows'
        run: |
          if command -v code >/dev/null 2>&1; then
            node tools/vscode-manager.js --enforce || true
          else
            echo 'VS Code CLI (code) nicht verf√ºgbar, VS Code Manager √ºbersprungen.'
          fi
      - name: üå°Ô∏è Run Health Check
        run: node tools/health-check.js
      - name: üì§ Upload Health Report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: HEALTH_REPORT.md
      - name: Slack-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "text": ":rotating_light: *Health-Check-Fehler bei BurniToken!*\nWorkflow: health-check\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Discord-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "content": ":rotating_light: **Health-Check-Fehler bei BurniToken!**\\nWorkflow: health-check\\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.DISCORD_WEBHOOK_URL }}
      - name: Status-Webhook bei Erfolg
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"success","workflow":"health-check"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      - name: Status-Webhook bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"failure","workflow":"health-check"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      - name: GitHub Issue bei kritischem Fehler
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "üö® Health-Check-Fehler: ${{ github.workflow }} @ ${{ github.sha }}"
          content-filepath: HEALTH_REPORT.md
          labels: bug, automated, health-check
