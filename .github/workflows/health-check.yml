name: Health Check

on:
  schedule:
    - cron: '0 5 * * *' # täglich um 5 Uhr UTC
  workflow_dispatch:

jobs:
  health-check:
    name: 🌡️ Health Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: 📥 Install dependencies
        run: npm ci || true
      - name: 📝 VS Code Settings & Keybindings bereitstellen
        run: |
          mkdir -p $HOME/.config/Code/User
          cp tools/vscode-settings.json $HOME/.config/Code/User/settings.json
          cp tools/vscode-keybindings.json $HOME/.config/Code/User/keybindings.json
          # Log-Verzeichnis für window is not responding-Check anlegen
          mkdir -p $HOME/.config/Code/logs/fake-log
          echo "[2025-06-29T12:00:00.000Z] window is not responding" > $HOME/.config/Code/logs/fake-log/renderer1.log
      - name: 🧩 Extension Manager (VS Code)
        if: runner.os == 'Linux' || runner.os == 'macOS' || runner.os == 'Windows'
        run: |
          if command -v code >/dev/null 2>&1; then
            node tools/extension-manager.js --enforce || true
          else
            echo 'VS Code CLI (code) nicht verfügbar, Extension-Check übersprungen.'
          fi
      - name: 🧑‍💻 VS Code Self-Healing Manager
        if: runner.os == 'Linux' || runner.os == 'macOS' || runner.os == 'Windows'
        run: |
          if command -v code >/dev/null 2>&1; then
            node tools/vscode-manager.js --enforce || true
          else
            echo 'VS Code CLI (code) nicht verfügbar, VS Code Manager übersprungen.'
          fi
      - name: 🌡️ Run Health Check
        run: node tools/health-check.js
      - name: 📤 Upload Health Report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: HEALTH_REPORT.md
      - name: 🌐 API-Monitoring
        run: node tools/api-monitor.js
      - name: 📤 Upload API Status Report
        uses: actions/upload-artifact@v4
        with:
          name: api-status
          path: API_STATUS.md
      - name: 📣 Community Feedback Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: node tools/feedback-report.js
      - name: 📤 Upload Feedback Report
        uses: actions/upload-artifact@v4
        with:
          name: feedback-report
          path: FEEDBACK_REPORT.md
      - name: 📣 Community Feedback aus Twitter/X integrieren
        run: |
          node tools/feedback-report.js --twitter || echo "Twitter-Feedback-Integration optional."
      - name: 📤 Upload Twitter Feedback Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: twitter-feedback-report
          path: FEEDBACK_REPORT_TWITTER.md
      - name: 📊 Status-Dashboard generieren
        run: node tools/status-dashboard.js
      - name: 📤 Upload Status Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: status-dashboard
          path: STATUS.md
      - name: 🛡️ Snyk Security Check
        uses: snyk/actions/node@v3
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: 📤 Upload Snyk Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk.log
      - name: ♻️ Recovery-Status prüfen
        run: node tools/recovery-check.js
      - name: 📤 Upload Recovery Status
        uses: actions/upload-artifact@v4
        with:
          name: recovery-status
          path: RECOVERY_STATUS.md
      - name: Slack-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "text": ":rotating_light: *Health-Check-Fehler bei BurniToken!*\nWorkflow: health-check\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Discord-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "content": ":rotating_light: **Health-Check-Fehler bei BurniToken!**\\nWorkflow: health-check\\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.DISCORD_WEBHOOK_URL }}
      - name: Status-Webhook bei Erfolg
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"success","workflow":"health-check"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      - name: Status-Webhook bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"failure","workflow":"health-check"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      - name: GitHub Issue bei kritischem Fehler
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "🚨 Health-Check-Fehler: ${{ github.workflow }} @ ${{ github.sha }}"
          content-filepath: HEALTH_REPORT.md
          labels: bug, automated, health-check
      - name: 🔧 Auto-Fix & Commit mit Gemini Bot (robust)
        if: failure()
        env:
          GEMINI_BOT_TOKEN: ${{ secrets.GEMINI_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "Gemini Bot"
          git config --global user.email "bot@burnitoken.com"
          git status
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto-Fix durch Gemini Bot: ${{ github.workflow }} @ ${{ github.sha }} (${{ github.run_id }})"
            git pull --rebase origin ${{ github.ref_name }} || echo "Rebase fehlgeschlagen, fahre fort."
            if git push https://x-access-token:${GEMINI_BOT_TOKEN}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}; then
              echo "Gemini Bot Commit & Push erfolgreich" > GEMINI_BOT_STATUS.md
            else
              echo "Push fehlgeschlagen, versuche PR zu erstellen..." | tee GEMINI_BOT_STATUS.md
              gh pr create --title "Auto-Fix: ${{ github.workflow }}" --body "Automatischer Fix durch Gemini Bot" --base ${{ github.ref_name }} --head ${{ github.ref_name }} || echo "PR-Erstellung fehlgeschlagen" >> GEMINI_BOT_STATUS.md
            fi
          else
            echo "Keine Änderungen zum Commit." > GEMINI_BOT_STATUS.md
          fi
      - name: 📤 Upload Gemini Bot Status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-bot-status
          path: GEMINI_BOT_STATUS.md
      - name: 📤 Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: LIGHTHOUSE_REPORT.html
      - name: 📤 Upload Visual Regression Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression
          path: tests/e2e/screenshots
      - name: 📤 Upload Playwright E2E Test Results
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-results
          path: test-results/
      - name: 📤 Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      - name: 📤 Upload SEO Status Report
        uses: actions/upload-artifact@v4
        with:
          name: seo-status
          path: SEO_STATUS.md
      - name: 📤 Upload Lighthouse Status Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-status
          path: LIGHTHOUSE_STATUS.md
      - name: 📤 Upload Feedback Report (Discord, E-Mail, weitere Kanäle)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: feedback-report-all-channels
          path: FEEDBACK_REPORT_ALL.md
      - name: 📨 Feedback aus allen Kanälen sammeln
        run: node tools/feedback-report-all.js
