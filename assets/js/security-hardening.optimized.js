class SecurityHardening { constructor(config = {}) { this.config = { csp: { enabled: true, reportOnly: false, directives: { 'default-src': ["'self'"], 'script-src': [ "'self'", "'unsafe-inline'", 'https: 'https: ], 'style-src': ["'self'", "'unsafe-inline'", 'https: 'img-src': ["'self'", 'data:', 'https:'], 'font-src': ["'self'", 'https: 'connect-src': [ "'self'", 'https: 'https: 'https: 'wss: ], 'frame-src': ["'none'"], 'object-src': ["'none'"], 'base-uri': ["'self'"], 'form-action': ["'self'"], 'upgrade-insecure-requests': [], }, }, rateLimit: { enabled: true, windowMs: 15 * 60 * 1000, maxRequests: 100, skipSuccessfulRequests: true, skipFailedRequests: false, keyGenerator: (request) => { return request.ip || request.headers['x-forwarded-for'] || 'unknown'}, }, ddosProtection: { enabled: true, maxConcurrentRequests: 50, maxRequestsPerSecond: 10, burstSize: 20, blockDuration: 60000, whitelist: ['127.0.0.1', '::1'], }, botDetection: { enabled: true, honeypots: [ { path: '/admin', type: 'path' }, { path: '/wp-admin', type: 'path' }, { path: '/login', type: 'path' }, { selector: '.honeypot', type: 'form' }, ], userAgentPatterns: [/bot/i, /crawler/i, /spider/i, /scraper/i], behaviorAnalysis: { maxClicksPerSecond: 5, maxScrollSpeed: 10000, minTimeBetweenActions: 100, }, }, securityHeaders: { 'X-Frame-Options': 'DENY', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Referrer-Policy': 'strict-origin-when-cross-origin', 'Permissions-Policy': 'geolocation=(self), microphone=(), camera=()', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload', }, threatMonitoring: { enabled: true, alertThreshold: 10, trackingEvents: [ 'failed_requests', 'blocked_ips', 'honeypot_triggers', 'rate_limit_exceeded', 'suspicious_behavior', ], }, ...config, }; this.state = { initialized: false, requestCounts: new Map(), blockedIPs: new Set(), suspiciousEvents: [], detectedBots: new Set(), securityIncidents: [], activeConnections: new Map(), }; this.intervals = new Map(); this.init()} async init() { console.log('🔐 Initializing Security Hardening...'); try { if (this.config.csp.enabled)  this.setupCSP()} if (this.config.rateLimit.enabled) { this.setupRateLimit()} if (this.config.botDetection.enabled) { this.setupBotDetection()} if (this.config.threatMonitoring.enabled) { this.setupThreatMonitoring()} this.setupSecurityHeaders(); this.startSecurityMonitoring(); this.state.initialized = true; console.log('✅ Security Hardening initialized successfully')} catch (error) { console.error('❌ Failed to initialize security hardening:', error); this.reportSecurityIncident('INIT_ERROR', error)} } setupCSP() { const cspString = this.generateCSPString(); if (typeof window !== 'undefined') { const metaCSP = document.createElement('meta'); metaCSP.httpEquiv = 'Content-Security-Policy'; metaCSP.content = cspString; document.head.appendChild(metaCSP); document.addEventListener('securitypolicyviolation', (event) => { this.handleCSPViolation(event)})} console.log('🛡️ CSP configured:', cspString)} generateCSPString() { const directives = []; for (const [directive, sources] of Object.entries(this.config.csp.directives)) { if (sources.length === 0) { directives.push(directive)} else { directives.push(`${directive} ${sources.join(' ')}`)} } return directives.join('; ')} handleCSPViolation(event) { const violation = { directive: event.violatedDirective, blockedURI: event.blockedURI, documentURI: event.documentURI, sourceFile: event.sourceFile, lineNumber: event.lineNumber, timestamp: Date.now(), }; this.reportSecurityIncident('CSP_VIOLATION', violation); console.warn('🚨 CSP Violation:', violation)} setupRateLimit() { if (typeof window !== 'undefined') { const requests = new Map(); const originalFetch = window.fetch; window.fetch = async (...args) => { const url = args[0]; const now = Date.now(); if (!requests.has(url)) { requests.set(url, [])} const urlRequests = requests.get(url); urlRequests.push(now); const cutoff = now - this.config.rateLimit.windowMs; while (urlRequests.length > 0 && urlRequests[0] < cutoff) { urlRequests.shift()} if (urlRequests.length > this.config.rateLimit.maxRequests) { this.reportSecurityIncident('RATE_LIMIT_EXCEEDED', { url, requestCount: urlRequests.length, timeWindow: this.config.rateLimit.windowMs, }); throw new Error('Rate limit exceeded')} return originalFetch.apply(this, args)}} console.log('⏱️ Rate limiting configured')} setupBotDetection() { if (typeof window === 'undefined') return; this.setupHoneypots(); this.analyzeUserAgent(); this.setupBehaviorAnalysis(); console.log('🤖 Bot detection configured')} setupHoneypots() { this.config.botDetection.honeypots.forEach((honeypot) => { if (honeypot.type === 'form') { const inputs = document.querySelectorAll('input, textarea'); inputs.forEach((input) => { const form = input.closest('form'); if (form && !form.querySelector('.honeypot')) { const honeypotField = document.createElement('input'); honeypotField.type = 'text'; honeypotField.name = 'website'; honeypotField.className = 'honeypot'; honeypotField.style.display = 'none'; honeypotField.tabIndex = -1; honeypotField.setAttribute('autocomplete', 'off'); form.appendChild(honeypotField); honeypotField.addEventListener('input', () => { this.triggerHoneypot('form_honeypot', { form: form.action || window.location.href, value: honeypotField.value, })})} })} else if (honeypot.type === 'path') { console.log(`🍯 Honeypot path configured: ${honeypot.path}`)} })} analyzeUserAgent() { const userAgent = navigator.userAgent; for (const pattern of this.config.botDetection.userAgentPatterns) { if (pattern.test(userAgent)) { this.detectBot('user_agent', { userAgent, pattern: pattern.toString(), }); break} } } setupBehaviorAnalysis() { let lastAction = 0; let clickCount = 0; let scrollSpeed = 0; document.addEventListener('click', () => { const now = Date.now(); clickCount++; if (now - lastAction < 1000) { if (clickCount > this.config.botDetection.behaviorAnalysis.maxClicksPerSecond) { this.detectBot('suspicious_clicks', { clicksPerSecond: clickCount, threshold: this.config.botDetection.behaviorAnalysis.maxClicksPerSecond, })} } else { clickCount = 1} lastAction = now}); let lastScrollY = window.scrollY; let lastScrollTime = Date.now(); window.addEventListener('scroll', () => { const now = Date.now(); const currentScrollY = window.scrollY; const scrollDiff = Math.abs(currentScrollY - lastScrollY); const timeDiff = now - lastScrollTime; if (timeDiff > 0) { scrollSpeed = scrollDiff / timeDiff; if (scrollSpeed > this.config.botDetection.behaviorAnalysis.maxScrollSpeed) { this.detectBot('suspicious_scroll', { scrollSpeed, threshold: this.config.botDetection.behaviorAnalysis.maxScrollSpeed, })} } lastScrollY = currentScrollY; lastScrollTime = now})} triggerHoneypot(type, data) { this.detectBot('honeypot', { type, ...data }); console.warn('🍯 Honeypot triggered:', type, data)} detectBot(reason, data) { const botData = { reason, data, userAgent: navigator.userAgent, ip: 'unknown', timestamp: Date.now(), }; this.state.detectedBots.add(JSON.stringify(botData)); this.reportSecurityIncident('BOT_DETECTED', botData); console.warn('🤖 Bot detected:', botData)} setupThreatMonitoring() { const monitoringInterval = setInterval(() => { this.analyzeThreatLevel()}, 60000); this.intervals.set('threatMonitoring', monitoringInterval); console.log('👁️ Threat monitoring configured')} analyzeThreatLevel() { const now = Date.now(); const oneMinuteAgo = now - 60000; const recentEvents = this.state.suspiciousEvents.filter( (event) => event.timestamp > oneMinuteAgo, ); if (recentEvents.length > this.config.threatMonitoring.alertThreshold) { this.reportSecurityIncident('HIGH_THREAT_LEVEL', { eventCount: recentEvents.length, threshold: this.config.threatMonitoring.alertThreshold, events: recentEvents.slice(-5), })} this.state.suspiciousEvents = this.state.suspiciousEvents.filter( (event) => event.timestamp > now - 3600000, )} setupSecurityHeaders() { console.log('🔒 Security headers configured:', this.config.securityHeaders)} startSecurityMonitoring() { const monitoringInterval = setInterval(() => { this.performSecurityCheck()}, 30000); this.intervals.set('securityMonitoring', monitoringInterval); console.log('🔍 Security monitoring started')} performSecurityCheck() { this.checkForAnomalies(); this.updateSecurityMetrics()} checkForAnomalies() { const now = Date.now(); for (const [ip, requests] of this.state.requestCounts.entries()) { const recentRequests = requests.filter((timestamp) => timestamp > now - 60000); if (recentRequests.length > 50) { this.reportSecurityIncident('SUSPICIOUS_REQUEST_PATTERN', { ip, requestCount: recentRequests.length, timeWindow: '1 minute', })} } } updateSecurityMetrics() { const metrics = { blockedIPs: this.state.blockedIPs.size, detectedBots: this.state.detectedBots.size, securityIncidents: this.state.securityIncidents.length, suspiciousEvents: this.state.suspiciousEvents.length, timestamp: Date.now(), }; if (window.burniMonitoring) { window.burniMonitoring.recordMetric('security_metrics', metrics)} } reportSecurityIncident(type, data) { const incident = { id: `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, type, data, severity: this.getIncidentSeverity(type), timestamp: Date.now(), userAgent: navigator?.userAgent || 'unknown', url: window?.location?.href || 'unknown', }; this.state.securityIncidents.push(incident); this.state.suspiciousEvents.push(incident); if (window.burniMonitoring) { window.burniMonitoring.createAlert({ type: 'security_incident', message: `Security incident: ${type}`, severity: incident.severity, data: incident, })} console.warn('🚨 Security incident:', incident); if (this.state.securityIncidents.length > 100) { this.state.securityIncidents.splice(0, this.state.securityIncidents.length - 100)} } getIncidentSeverity(type) { const severityMap = { CSP_VIOLATION: 'medium', RATE_LIMIT_EXCEEDED: 'medium', BOT_DETECTED: 'low', HIGH_THREAT_LEVEL: 'critical', SUSPICIOUS_REQUEST_PATTERN: 'high', INIT_ERROR: 'high', }; return severityMap[type] || 'medium'} getSecurityStatus() { return { initialized: this.state.initialized, threats: { blockedIPs: this.state.blockedIPs.size, detectedBots: this.state.detectedBots.size, recentIncidents: this.state.securityIncidents.slice(-10), }, protection: { csp: this.config.csp.enabled, rateLimit: this.config.rateLimit.enabled, botDetection: this.config.botDetection.enabled, threatMonitoring: this.config.threatMonitoring.enabled, }, timestamp: Date.now(), }} getSecurityMetrics() { return { incidents: this.state.securityIncidents.length, recentEvents: this.state.suspiciousEvents.length, detectedThreats: this.state.detectedBots.size, blockedIPs: this.state.blockedIPs.size, }} blockIP(ip, reason) { this.state.blockedIPs.add(ip); this.reportSecurityIncident('IP_BLOCKED', { ip, reason }); console.warn(`🚫 IP blocked: ${ip} (${reason})`)} unblockIP(ip) { this.state.blockedIPs.delete(ip); console.log(`✅ IP unblocked: ${ip}`)} destroy() { for (const [name, intervalId] of this.intervals.entries()) { clearInterval(intervalId)} this.intervals.clear(); this.state.requestCounts.clear(); this.state.blockedIPs.clear(); this.state.detectedBots.clear(); this.state.suspiciousEvents = []; this.state.securityIncidents = []; console.log('💥 Security Hardening destroyed')} } window.SecurityHardening = SecurityHardening; if (typeof window !== 'undefined') { window.addEventListener('DOMContentLoaded', () => { window.burniSecurity = new SecurityHardening()})} function Policy(...args) { console.log('Policy aufgerufen mit Argumenten:', args); return undefined}  function Map(...args) { console.log('Map aufgerufen mit Argumenten:', args); return undefined} function Set(...args) { console.log('Set aufgerufen mit Argumenten:', args); return undefined} function init(...args) { console.log('init aufgerufen mit Argumenten:', args); return undefined}   function setupCSP(...args) { console.log('setupCSP aufgerufen mit Argumenten:', args); return undefined} function setupRateLimit(...args) { console.log('setupRateLimit aufgerufen mit Argumenten:', args); return undefined} function setupBotDetection(...args) { console.log('setupBotDetection aufgerufen mit Argumenten:', args); return undefined} function setupThreatMonitoring(...args) { console.log('setupThreatMonitoring aufgerufen mit Argumenten:', args); return undefined} function Headers(...args) { console.log('Headers aufgerufen mit Argumenten:', args); return undefined} function setupSecurityHeaders(...args) { console.log('setupSecurityHeaders aufgerufen mit Argumenten:', args); return undefined} function startSecurityMonitoring(...args) { console.log('startSecurityMonitoring aufgerufen mit Argumenten:', args); return undefined}   function reportSecurityIncident(...args) { console.log('reportSecurityIncident aufgerufen mit Argumenten:', args); return undefined} function generateCSPString(...args) { console.log('generateCSPString aufgerufen mit Argumenten:', args); return undefined} function header(...args) { console.log('header aufgerufen mit Argumenten:', args); return undefined} function createElement(...args) { console.log('createElement aufgerufen mit Argumenten:', args); return undefined} function appendChild(...args) { console.log('appendChild aufgerufen mit Argumenten:', args); return undefined} function addEventListener(...args) { console.log('addEventListener aufgerufen mit Argumenten:', args); return undefined} function handleCSPViolation(...args) { console.log('handleCSPViolation aufgerufen mit Argumenten:', args); return undefined}  function entries(...args) { console.log('entries aufgerufen mit Argumenten:', args); return undefined} function push(...args) { console.log('push aufgerufen mit Argumenten:', args); return undefined} function join(...args) { console.log('join aufgerufen mit Argumenten:', args); return undefined} function now(...args) { console.log('now aufgerufen mit Argumenten:', args); return undefined}  function async(...args) { console.log('async aufgerufen mit Argumenten:', args); return undefined} function has(...args) { console.log('has aufgerufen mit Argumenten:', args); return undefined} function set(...args) { console.log('set aufgerufen mit Argumenten:', args); return undefined} function get(...args) { console.log('get aufgerufen mit Argumenten:', args); return undefined}  function shift(...args) { console.log('shift aufgerufen mit Argumenten:', args); return undefined} function apply(...args) { console.log('apply aufgerufen mit Argumenten:', args); return undefined} function setupHoneypots(...args) { console.log('setupHoneypots aufgerufen mit Argumenten:', args); return undefined} function analyzeUserAgent(...args) { console.log('analyzeUserAgent aufgerufen mit Argumenten:', args); return undefined} function setupBehaviorAnalysis(...args) { console.log('setupBehaviorAnalysis aufgerufen mit Argumenten:', args); return undefined} function forEach(...args) { console.log('forEach aufgerufen mit Argumenten:', args); return undefined} function querySelectorAll(...args) { console.log('querySelectorAll aufgerufen mit Argumenten:', args); return undefined} function closest(...args) { console.log('closest aufgerufen mit Argumenten:', args); return undefined} function querySelector(...args) { console.log('querySelector aufgerufen mit Argumenten:', args); return undefined} function setAttribute(...args) { console.log('setAttribute aufgerufen mit Argumenten:', args); return undefined} function triggerHoneypot(...args) { console.log('triggerHoneypot aufgerufen mit Argumenten:', args); return undefined} function test(...args) { console.log('test aufgerufen mit Argumenten:', args); return undefined} function detectBot(...args) { console.log('detectBot aufgerufen mit Argumenten:', args); return undefined} function toString(...args) { console.log('toString aufgerufen mit Argumenten:', args); return undefined} function abs(...args) { console.log('abs aufgerufen mit Argumenten:', args); return undefined} function add(...args) { console.log('add aufgerufen mit Argumenten:', args); return undefined} function stringify(...args) { console.log('stringify aufgerufen mit Argumenten:', args); return undefined} function analyzeThreatLevel(...args) { console.log('analyzeThreatLevel aufgerufen mit Argumenten:', args); return undefined} function filter(...args) { console.log('filter aufgerufen mit Argumenten:', args); return undefined} function slice(...args) { console.log('slice aufgerufen mit Argumenten:', args); return undefined} function performSecurityCheck(...args) { console.log('performSecurityCheck aufgerufen mit Argumenten:', args); return undefined} function checkForAnomalies(...args) { console.log('checkForAnomalies aufgerufen mit Argumenten:', args); return undefined} function updateSecurityMetrics(...args) { console.log('updateSecurityMetrics aufgerufen mit Argumenten:', args); return undefined} function recordMetric(...args) { console.log('recordMetric aufgerufen mit Argumenten:', args); return undefined} function random(...args) { console.log('random aufgerufen mit Argumenten:', args); return undefined} function substr(...args) { console.log('substr aufgerufen mit Argumenten:', args); return undefined} function getIncidentSeverity(...args) { console.log('getIncidentSeverity aufgerufen mit Argumenten:', args); return undefined} function createAlert(...args) { console.log('createAlert aufgerufen mit Argumenten:', args); return undefined} function splice(...args) { console.log('splice aufgerufen mit Argumenten:', args); return undefined} function getSecurityStatus(...args) { console.log('getSecurityStatus aufgerufen mit Argumenten:', args); return undefined} function getSecurityMetrics(...args) { console.log('getSecurityMetrics aufgerufen mit Argumenten:', args); return undefined} function blockIP(...args) { console.log('blockIP aufgerufen mit Argumenten:', args); return undefined} function unblockIP(...args) { console.log('unblockIP aufgerufen mit Argumenten:', args); return undefined} function delete(...args) { console.log('delete aufgerufen mit Argumenten:', args); return undefined} function destroy(...args) { console.log('destroy aufgerufen mit Argumenten:', args); return undefined} function clear(...args) { console.log('clear aufgerufen mit Argumenten:', args); return undefined} function SecurityHardening(...args) { console.log('SecurityHardening aufgerufen mit Argumenten:', args); return undefined}