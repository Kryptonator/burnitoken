// Chart.js Minimal Implementation for BurniToken
// This is a lightweight Chart.js-compatible implementation for basic charts

(function() {
    'use strict';
    
    // Chart constructor
    function Chart(ctx, config) {
        this.ctx = typeof ctx === 'string' ? document.getElementById(ctx) : ctx;
        this.config = config;
        this.data = config.data;
        this.options = config.options || {};
        this.type = config.type;
        
        this.init();
    }
    
    Chart.prototype.init = function() {
        if (!this.ctx) return;
        
        // Create canvas if not exists
        if (this.ctx.tagName !== 'CANVAS') {
            const canvas = document.createElement('canvas');
            canvas.width = this.ctx.offsetWidth || 400;
            canvas.height = this.ctx.offsetHeight || 200;
            this.ctx.appendChild(canvas);
            this.ctx = canvas;
        }
        
        this.render();
    };
    
    Chart.prototype.render = function() {
        const ctx = this.ctx.getContext('2d');
        const width = this.ctx.width;
        const height = this.ctx.height;
        
        // Clear canvas
        ctx.clearRect(0, 0, width, height);
        
        if (this.type === 'doughnut' || this.type === 'pie') {
            this.renderDoughnut(ctx, width, height);
        } else if (this.type === 'line') {
            this.renderLine(ctx, width, height);
        } else {
            // Fallback: render placeholder
            this.renderPlaceholder(ctx, width, height);
        }
    };
    
    Chart.prototype.renderDoughnut = function(ctx, width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const radius = Math.min(width, height) / 3;
        
        if (!this.data || !this.data.datasets || !this.data.datasets[0]) return;
        
        const dataset = this.data.datasets[0];
        const data = dataset.data || [];
        const total = data.reduce((sum, val) => sum + val, 0);
        
        let currentAngle = -Math.PI / 2;
        
        data.forEach((value, index) => {
            const sliceAngle = (value / total) * 2 * Math.PI;
            const color = dataset.backgroundColor && dataset.backgroundColor[index] || '#f97316';
            
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            ctx.lineTo(centerX, centerY);
            ctx.fillStyle = color;
            ctx.fill();
            
            currentAngle += sliceAngle;
        });
    };
    
    Chart.prototype.renderLine = function(ctx, width, height) {
        const margin = 40;
        const chartWidth = width - 2 * margin;
        const chartHeight = height - 2 * margin;
        
        if (!this.data || !this.data.datasets || !this.data.datasets[0]) return;
        
        const dataset = this.data.datasets[0];
        const data = dataset.data || [];
        const labels = this.data.labels || [];
        
        if (data.length === 0) return;
        
        const max = Math.max(...data);
        const min = Math.min(...data);
        const range = max - min || 1;
        
        ctx.strokeStyle = dataset.borderColor || '#f97316';
        ctx.lineWidth = 2;
        ctx.beginPath();
        
        data.forEach((value, index) => {
            const x = margin + (index / (data.length - 1)) * chartWidth;
            const y = margin + ((max - value) / range) * chartHeight;
            
            if (index === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        });
        
        ctx.stroke();
    };
    
    Chart.prototype.renderPlaceholder = function(ctx, width, height) {
        // Render a simple placeholder
        ctx.fillStyle = '#f3f4f6';
        ctx.fillRect(0, 0, width, height);
        
        ctx.fillStyle = '#6b7280';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Chart Loading...', width / 2, height / 2);
    };
    
    Chart.prototype.update = function() {
        this.render();
    };
    
    Chart.prototype.destroy = function() {
        // Cleanup if needed
    };
    
    // Static methods
    Chart.register = function() {
        // Compatibility method
        return true;
    };
    
    // Export Chart globally
    window.Chart = Chart;
    
    // Console log for debugging
    console.log('Chart.js minimal implementation loaded for BurniToken');
    
})();
