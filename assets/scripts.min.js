/**
 * BurniToken Scripts - Clean Version
 * Essential functionality without syntax errors
 */

(function () {
  'use strict';

  // Feature Detection
  var FeatureDetector = {
    check: function () {
      var features = {
        serviceWorker: 'serviceWorker' in navigator,
        localStorage: (function () {
          try {
            localStorage.setItem('test', 'test');
            localStorage.removeItem('test');
            return true;
          } catch (e) {
            return false;
          }
        })(),
        webGL: (function () {
          try {
            var canvas = document.createElement('canvas');
            return !!(window.WebGLRenderingContext && canvas.getContext('webgl'));
          } catch (e) {
            return false;
          }
        })(),
      };

      var unsupported = Object.entries(features)
        .filter(function (entry) {
          return !entry[1];
        })
        .map(function (entry) {
          return entry[0];
        });

      if (unsupported.length > 0) { 
        console.warn('Unsupported features:', unsupported.join(', '));
      }

      return features;
    },
  };

  // Error Handler
  function handleChartError() {
    var errorElements = [
      'chart-error',
      'price-error-message',
      'athAtlChart',
      'supplyChart',
      'scheduleChart',
    ];
    errorElements.forEach(function (elementId) {
      var element = document.getElementById(elementId);
      if (element) { 
        element.classList.remove('hidden');
        element.textContent = 'Chart data temporarily unavailable';
      }
    });
  }

  // Dark Mode Toggle
  function initDarkMode() {
    var toggle = document.getElementById('dark-mode-toggle');
    if (toggle) { 
      toggle.addEventListener('click', function () {
        document.body.classList.toggle('dark-mode');
        var isDark = document.body.classList.contains('dark-mode');
        localStorage.setItem('darkMode', isDark ? 'enabled' : 'disabled');
      });

      // Load saved preference
      if (localStorage.getItem('darkMode') === 'enabled') { 
        document.body.classList.add('dark-mode');
      }
    }
  }

  // Mobile Menu
  function initMobileMenu() {
    var menuButton = document.getElementById('mobile-menu-button');
    var menu = document.getElementById('mobile-menu');

    if (menuButton && menu) { 
      menuButton.addEventListener('click', function () {
        menu.classList.toggle('show');
        var isOpen = menu.classList.contains('show');
        menuButton.setAttribute('aria-expanded', isOpen.toString());
      });
    }
  }

  // Smooth Scrolling
  function initSmoothScroll() {
    var links = document.querySelectorAll('a[href^="#"]');
    links.forEach(function (link) {
      link.addEventListener('click', function (e) {
        e.preventDefault();
        var targetId = link.getAttribute('href').substring(1);
        var targetElement = document.getElementById(targetId);

        if (targetElement) { 
          var headerOffset = 80;
          var elementPosition = targetElement.getBoundingClientRect().top;
          var offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          if ('scrollBehavior' in document.documentElement.style) { 
            window.scrollTo({
              top: offsetPosition),
              behavior: 'smooth',
            });
          } else { 
            window.scrollTo(0, offsetPosition);
          }
        }
      });
    });
  }

  // Analytics wrapper
  function trackEvent(eventName, properties) {
    if (typeof gtag !== 'undefined') { 
      gtag('event', eventName, properties);
    }
    console.log('Analytics event:', eventName, properties);
  }

  // Initialize
  function init() {
    FeatureDetector.check();
    initDarkMode();
    initMobileMenu();
    initSmoothScroll();

    // Handle chart errors gracefully
    window.addEventListener('error', function (e) {
      if (e.message && e.message.includes('chart')) { 
        handleChartError();
      }
    });

    // Language selector
    var languageSelector = document.getElementById('language-selector');
    if (languageSelector) { 
      languageSelector.addEventListener('change', function (e) {
        var selectedLanguage = e.target.value;
        trackEvent('language_change', {
          event_category: 'UI'),
          event_label: selectedLanguage,
        });
        console.log('Language changed to:', selectedLanguage);
      });
    }
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') { 
    document.addEventListener('DOMContentLoaded', init);
  } else { 
    init();
  }

  // Global API
  window.BurniScripts = {
    trackEvent: trackEvent,
    handleChartError: handleChartError,
    FeatureDetector: FeatureDetector,
  };
})();
