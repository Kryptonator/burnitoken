// tools/generate-status-report.js\n// Generiert einen HTML-Statusbericht basierend auf verschiedenen System-Checks.\n\nconst fs = require(\'fs\');\nconst path = require(\'path\');\nconst { execSync } = require(\'child_process\');\n\n// --- Pfade ---\nconst TEMPLATE_PATH = path.join(__dirname, \'status-report-template.html\');\nconst OUTPUT_PATH = path.join(__dirname, \'..\/status-report.html\'); // Im Hauptverzeichnis\nconst MASTER_STATUS_PATH = path.join(__dirname, \'master-task-status.json\');\n\n// --- Hilfsfunktionen ---\nfunction getStatusIcon(status) {\n    if (status === \'ok\') return \'✅\';\n    if (status === \'warn\') return \'⚠️\';\n    if (status === \'error\') return \'❌\';\n    return \'❓\';\n}\n\nfunction getStatusClass(status) {\n    if (status === \'ok\') return \'status-ok\';\n    if (status === \'warn\') return \'status-warn\';\n    if (status === \'error\') return \'status-error\';\n    return \'\';\n}\n\n// --- Daten sammeln ---\n\n// 1. Master Task Manager Status\nlet servicesStatusHtml = \'\';\nlet overallStatus = \'ok\';\nlet runningServices = 0;\nlet errorServices = 0;\n\ntry {\n    const masterStatus = JSON.parse(fs.readFileSync(MASTER_STATUS_PATH, \'utf8\'));\n    Object.values(masterStatus.services).forEach(service => {\n        const status = service.exitCode === 0 ? \'ok\' : (service.error ? \'error\' : \'warn\');\n        if (status === \'error\') errorServices++;\n        if (service.running) runningServices++;\n\n        servicesStatusHtml += `\n            <div class=\"status ${getStatusClass(status)}\">\n                <span class=\"status-icon\">${getStatusIcon(status)}</span>\n                <span class=\"status-text\">${service.name}</span>\n            </div>\n            <p class=\"details\">Status: ${service.running ? \'Läuft\' : \'Beendet\'} | Code: ${service.exitCode ?? \'N/A\'}</p>\n        `;\n    });\n    if (errorServices > 0) overallStatus = \'error\';\n    else if (runningServices > 0) overallStatus = \'warn\'; // Warnung, wenn Services noch laufen\n\n} catch (e) {\n    servicesStatusHtml = \'<div class=\"status status-error\"><span class=\"status-icon\">❌</span><span class=\"status-text\">Master-Status konnte nicht gelesen werden.</span></div>\';\n    overallStatus = \'error\';\n}\n\n// 2. Dependabot Status (simuliert durch den Monitor)\ntry {\n    const dependabotOutput = execSync(\'node tools/dependabot-monitor.js\').toString();\n    const status = dependabotOutput.includes(\'ALERT\') ? \'warn\' : \'ok\';\n    const text = dependabotOutput.includes(\'ALERT\') ? \'Überfällige PRs gefunden\' : \'Keine überfälligen PRs\';\n    const dependabotHtml = `\n        <div class=\"status ${getStatusClass(status)}\">\n            <span class=\"status-icon\">${getStatusIcon(status)}</span>\n            <span class=\"status-text\">Dependabot PRs</span>\n        </div>\n        <p class=\"details\">${text}</p>\n    `;\n    if(status === \'warn\') overallStatus = \'warn\';\n} catch (e) {\n    dependabotHtml = \'<div class=\"status status-error\"><span class=\"status-icon\">❌</span><span class=\"status-text\">Dependabot-Check fehlgeschlagen.</span></div>\';\n}\n\n// (Platzhalter für weitere Checks wie Snyk)\nconst snykHtml = \'<div class=\"status status-ok\"><span class=\"status-icon\">✅</span><span class=\"status-text\">Snyk Security</span></div><p class=\"details\">Keine neuen kritischen Lücken</p>\';\n\n// --- HTML generieren ---\nlet template = fs.readFileSync(TEMPLATE_PATH, \'utf8\');\n\nconst replacements = {\n    \'{{GESAMT_STATUS_KLASSE}}\': getStatusClass(overallStatus),\n    \'{{GESAMT_STATUS_ICON}}\': getStatusIcon(overallStatus),\n    \'{{GESAMT_STATUS_TEXT}}\': overallStatus === \'ok\' ? \'Alle Systeme betriebsbereit\' : (overallStatus === \'warn\' ? \'Einige Systeme benötigen Aufmerksamkeit\' : \'Kritische Fehler festgestellt\'),\n    \'{{JETZT_DATUM}}\': new Date().toLocaleString(\'de-DE\'),\n    \'{{SERVICES_STATUS}}\': servicesStatusHtml,\n    \'{{DEPENDABOT_STATUS}}\': dependabotHtml,\n    \'{{SNYK_STATUS}}\': snykHtml\n};\n\nfor (const [key, value] of Object.entries(replacements)) {\n    template = template.replace(new RegExp(key, \'g\'), value);\n}\n\nfs.writeFileSync(OUTPUT_PATH, template);\n\nconsole.log(`✅ HTML-Statusbericht erfolgreich erstellt: ${OUTPUT_PATH}`);
