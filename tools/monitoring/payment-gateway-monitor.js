#!/usr/bin/env node

/**
 * Payment Gateway Monitoring Tool
 * Monitors the payment gateway service for database connectivity issues
 * Specifically checks for E-12045 error (database connection failure)
 */

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const nodemailer = require('nodemailer');
require('dotenv').config();

class PaymentGatewayMonitor {
  constructor() {
    this.serviceName = 'payment-gateway';
    this.checkInterval = 30000; // 30 seconds
    this.alertThreshold = 3; // Alert after 3 consecutive failures
    this.consecutiveFailures = 0;
    this.isRunning = false;
    this.lastAlert = null;
    this.alertCooldown = 300000; // 5 minutes between alerts
    
    // Configure email transporter
    this.setupEmailTransporter();
  }

  setupEmailTransporter() {
    if (process.env.YAHOO_APP_PASSWORD) {
      this.transporter = nodemailer.createTransporter({
        host: 'smtp.mail.yahoo.com',
        port: 465,
        secure: true,
        auth: {
          user: 'burn.coin@yahoo.com',
          pass: process.env.YAHOO_APP_PASSWORD,
        },
      });
    } else {
      console.log('üìß Email alerts disabled - YAHOO_APP_PASSWORD not configured');
    }
  }

  async checkServiceHealth(baseUrl = 'http://localhost:3001') {
    const endpoint = `${baseUrl}/health`;
    
    try {
      console.log(`üîç Checking payment gateway health: ${endpoint}`);
      
      const response = await fetch(endpoint, {
        method: 'GET',
        timeout: 10000, // 10 second timeout
        headers: {
          'User-Agent': 'BurniToken-Monitor/1.0'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const healthData = await response.json();
      console.log('üìä Health check response:', healthData);

      return {
        healthy: healthData.status === 'healthy',
        errorCode: healthData.error || null,
        errorMessage: healthData.errorMessage || null,
        database: healthData.database || 'unknown',
        timestamp: healthData.timestamp || new Date().toISOString(),
        responseTime: Date.now() - Date.parse(healthData.timestamp || new Date().toISOString())
      };

    } catch (error) {
      console.error('‚ùå Health check failed:', error.message);
      
      return {
        healthy: false,
        errorCode: 'E-12046', // Generic connection error
        errorMessage: error.message,
        database: 'unreachable',
        timestamp: new Date().toISOString(),
        responseTime: null
      };
    }
  }

  async sendAlert(healthResult, alertType = 'CRITICAL') {
    if (!this.transporter) {
      console.log('üìß Cannot send email alert - transporter not configured');
      return false;
    }

    // Check cooldown period
    if (this.lastAlert && (Date.now() - this.lastAlert) < this.alertCooldown) {
      console.log('‚è≥ Alert cooldown active - skipping email');
      return false;
    }

    const subject = `üö® [BurniToken ${alertType}] Payment Gateway Error - ${healthResult.errorCode}`;
    
    const emailBody = `
üö® BURNITOKEN PAYMENT GATEWAY ALERT

Level: ${alertType}
Service: payment-gateway
Error Code: ${healthResult.errorCode}
Timestamp: ${healthResult.timestamp}

ISSUE DETAILS:
${healthResult.errorCode === 'E-12045' ? 
  'Die Verbindung zur Datenbank konnte nicht hergestellt werden. Dieser Test √ºberpr√ºft die gesamte Kette.' :
  healthResult.errorMessage
}

SYSTEM STATUS:
- Database: ${healthResult.database}
- Service Health: ${healthResult.healthy ? 'Healthy' : 'Unhealthy'}
- Response Time: ${healthResult.responseTime || 'N/A'}ms
- Consecutive Failures: ${this.consecutiveFailures}

ADDITIONAL DATA:
${JSON.stringify({
  service: "payment-gateway",
  errorCode: healthResult.errorCode,
  timestamp: healthResult.timestamp,
  details: healthResult.errorMessage
}, null, 2)}

This alert was automatically generated by the BurniToken monitoring system.
Please investigate and resolve this issue immediately.

---
BurniToken Monitoring System
https://burnitoken.website
    `.trim();

    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #dc3545;">üö® BurniToken Payment Gateway Alert</h2>
        
        <div style="background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0; color: #721c24;">Critical System Error</h3>
          <p><strong>Level:</strong> ${alertType}</p>
          <p><strong>Service:</strong> payment-gateway</p>
          <p><strong>Error Code:</strong> ${healthResult.errorCode}</p>
          <p><strong>Timestamp:</strong> ${healthResult.timestamp}</p>
        </div>

        <h3>Issue Details</h3>
        <p>${healthResult.errorCode === 'E-12045' ? 
          'Die Verbindung zur Datenbank konnte nicht hergestellt werden. Dieser Test √ºberpr√ºft die gesamte Kette.' :
          healthResult.errorMessage
        }</p>

        <h3>System Status</h3>
        <ul>
          <li><strong>Database:</strong> ${healthResult.database}</li>
          <li><strong>Service Health:</strong> ${healthResult.healthy ? 'Healthy' : 'Unhealthy'}</li>
          <li><strong>Response Time:</strong> ${healthResult.responseTime || 'N/A'}ms</li>
          <li><strong>Consecutive Failures:</strong> ${this.consecutiveFailures}</li>
        </ul>

        <h3>Additional Data</h3>
        <pre style="background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto;">${JSON.stringify({
          service: "payment-gateway",
          errorCode: healthResult.errorCode,
          timestamp: healthResult.timestamp,
          details: healthResult.errorMessage
        }, null, 2)}</pre>

        <p style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd; color: #666;">
          This alert was automatically generated by the BurniToken monitoring system.<br>
          Please investigate and resolve this issue immediately.
        </p>
      </div>
    `;

    try {
      const mailOptions = {
        from: 'BurniToken Monitoring <burn.coin@yahoo.com>',
        to: 'burn.coin@yahoo.com',
        subject: subject,
        text: emailBody,
        html: htmlBody
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log('üìß Alert email sent:', info.messageId);
      this.lastAlert = Date.now();
      return true;

    } catch (error) {
      console.error('‚ùå Failed to send alert email:', error.message);
      return false;
    }
  }

  async runCheck() {
    const healthResult = await this.checkServiceHealth();
    
    if (healthResult.healthy) {
      console.log('‚úÖ Payment gateway is healthy');
      this.consecutiveFailures = 0;
    } else {
      this.consecutiveFailures++;
      console.log(`‚ùå Payment gateway unhealthy (${this.consecutiveFailures}/${this.alertThreshold})`);
      
      // Send alert if threshold reached
      if (this.consecutiveFailures >= this.alertThreshold) {
        console.log('üö® Alert threshold reached - sending notification');
        
        const alertType = healthResult.errorCode === 'E-12045' ? 'CRITICAL' : 'WARNING';
        await this.sendAlert(healthResult, alertType);
        
        // Special handling for E-12045 (database connection failure)
        if (healthResult.errorCode === 'E-12045') {
          console.log('üí• CRITICAL ERROR E-12045 DETECTED:');
          console.log('This matches the exact error reported in the automated alert system');
          console.log('Database connection to payment gateway has failed');
        }
      }
    }

    return healthResult;
  }

  async startMonitoring() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Monitoring already running');
      return;
    }

    console.log('üöÄ Starting Payment Gateway Monitoring...');
    console.log(`üìä Check interval: ${this.checkInterval}ms`);
    console.log(`üö® Alert threshold: ${this.alertThreshold} consecutive failures`);
    console.log('=====================================');

    this.isRunning = true;

    // Initial check
    await this.runCheck();

    // Schedule periodic checks
    this.monitorInterval = setInterval(async () => {
      if (this.isRunning) {
        await this.runCheck();
      }
    }, this.checkInterval);
  }

  stopMonitoring() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Monitoring not running');
      return;
    }

    console.log('üõë Stopping Payment Gateway Monitoring...');
    this.isRunning = false;
    
    if (this.monitorInterval) {
      clearInterval(this.monitorInterval);
    }
  }

  async runSingleCheck() {
    console.log('üîç Running single payment gateway health check...');
    const result = await this.runCheck();
    
    if (!result.healthy && result.errorCode === 'E-12045') {
      console.log('\nüö® CRITICAL SYSTEM ERROR DETECTED:');
      console.log('Level: CRITICAL');
      console.log('Message: Automatischer End-to-End-Test: Kritischer Systemfehler im Backend-Service');
      console.log('Additional Data:', {
        service: "payment-gateway",
        errorCode: "E-12045",
        timestamp: result.timestamp,
        details: "Die Verbindung zur Datenbank konnte nicht hergestellt werden. Dieser Test √ºberpr√ºft die gesamte Kette."
      });
    }
    
    return result;
  }
}

// CLI Interface
async function main() {
  const monitor = new PaymentGatewayMonitor();
  
  const args = process.argv.slice(2);
  
  if (args.includes('--single') || args.includes('-s')) {
    // Run single check
    const result = await monitor.runSingleCheck();
    process.exit(result.healthy ? 0 : 1);
  } else if (args.includes('--continuous') || args.includes('-c')) {
    // Run continuous monitoring
    await monitor.startMonitoring();
    
    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë Received shutdown signal');
      monitor.stopMonitoring();
      process.exit(0);
    });
    
    process.on('SIGTERM', () => {
      console.log('\nüõë Received termination signal');
      monitor.stopMonitoring();
      process.exit(0);
    });
  } else {
    console.log('üìã Payment Gateway Monitor Usage:');
    console.log('  --single, -s     Run single health check');
    console.log('  --continuous, -c Run continuous monitoring');
    console.log('');
    console.log('Examples:');
    console.log('  node tools/monitoring/payment-gateway-monitor.js --single');
    console.log('  node tools/monitoring/payment-gateway-monitor.js --continuous');
    
    // Default to single check
    await monitor.runSingleCheck();
  }
}

// Export for testing
module.exports = PaymentGatewayMonitor;

// Run if called directly
if (require.main === module) {
  main().catch(console.error);
}