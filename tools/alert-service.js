const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });
// alert-service.js
// Zentrale Alert-Funktion für kritische Fehler/Status (Slack, Webhook, E-Mail)
// Nutzung: require('./tools/alert-service').sendAlert(...)

const https = require('https');
const url = require('url');
const { createGitHubIssue } = require('./github-issue-creator');

/**
 * Sende einen Alert an einen Webhook und/oder erstelle ein GitHub Issue.
 * @param {Object} options
 * @param {string} options.message - Die Nachricht (Pflichtfeld)
 * @param {string} [options.webhookUrl=process.env.ALERT_WEBHOOK_URL] - Die Webhook-URL (optional, sonst nur Log)
 * @param {string} [options.level='error'] - z.B. 'error', 'warning', 'info'
 * @param {Object} [options.extra={}] - Zusätzliche Daten für den Webhook (optional)
 * @param {boolean} [options.createIssue=false] - Ob ein GitHub Issue erstellt werden soll (optional)
 */
async function sendAlert({
  message,
  webhookUrl = process.env.ALERT_WEBHOOK_URL,
  level = 'error',
  extra = {},
  createIssue = false,
}) {
  if (!message) return;

  const payload = {
    text: `[${level.toUpperCase()}] ${message}`,
    ...extra,
  };

  // 1. Webhook senden (falls konfiguriert)
  if (webhookUrl) {
    const parsedUrl = url.parse(webhookUrl);
    const data = JSON.stringify(payload);
    const req = https.request(
      {
        hostname: parsedUrl.hostname,
        path: parsedUrl.path,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': data.length,
        },
      },
      (res) => {},
    );
    req.on('error', (e) => {
      console.error('Alert-Webhook-Fehler:', e);
    });
    req.write(data);
    req.end();
  } else {
    // Fallback: Logge Alert lokal, wenn kein Webhook da ist
    console.error('LOKALER ALERT:', payload);
  }

  // 2. GitHub Issue erstellen (falls angefordert und Level 'error' ist)
  if (createIssue && level === 'error') {
    try {
      const issueTitle = `Automatischer Alert: ${message.substring(0, 80)}...`;
      const issueBody = `**Level:** ${level.toUpperCase()}\n**Meldung:**\n${message}`;
      await createGitHubIssue(issueTitle, issueBody, ['bug', 'autogenerated', 'critical-alert']);
    } catch (error) {
      console.error(
        'Fehler beim Erstellen des GitHub Issues aus dem Alert-Service:',
        error.message,
      );
    }
  }
}

module.exports = { sendAlert };
