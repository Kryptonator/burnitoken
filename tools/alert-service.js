// alert-service.js
// Zentrale Alert-Funktion f√ºr kritische Fehler/Status (Slack, Webhook, E-Mail)
// Nutzung: require('./tools/alert-service').sendAlert(...)

const https = require('https');
const url = require('url');
const { createGitHubIssue } = require('./github-issue-creator'); // Importiert den Issue Creator
const nodemailer = require('nodemailer');

/**
 * Sende einen Alert an einen Webhook und/oder erstelle ein GitHub Issue.
 * @param {Object} options
 * @param {string} options.message - Die Nachricht (Pflichtfeld)
 * @param {string} [options.webhookUrl] - Die Webhook-URL (optional)
 * @param {string} [options.level] - z.B. 'error', 'warning', 'info'
 * @param {Object} [options.extra] - Zus√§tzliche Daten (optional)
 * @param {boolean} [options.createIssue] - Ob ein GitHub Issue erstellt werden soll (Standard: true f√ºr Fehler)
 * @param {Object} [options.email] - E-Mail-Konfiguration (optional)
 * @param {string} options.email.to - Empf√§nger-E-Mail-Adresse
 * @param {string} options.email.subject - Betreff der E-Mail
 */
async function sendAlert({
  message,
  webhookUrl,
  level = 'error',
  extra = {},
  createIssue = level === 'error' || level === 'critical',
  email,
}) {
  if (!message) return;

  const payload = {
    text: `[${level.toUpperCase()}] ${message}`,
    ...extra,
  };

  // Webhook senden
  if (webhookUrl) {
    const parsedUrl = url.parse(webhookUrl);
    const data = JSON.stringify(payload);
    const req = https.request(
      {
        hostname: parsedUrl.hostname,
        path: parsedUrl.path,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': data.length,
        },
      },
      (res) => {},
    );
    req.on('error', (e) => {
      console.error('Alert-Webhook-Fehler:', e);
    });
    req.write(data);
    req.end();
  }

  // E-Mail senden
  if (email && email.to) {
    try {
      // Transporter-Konfiguration - passe dies f√ºr deinen E-Mail-Provider an
      const transporter = nodemailer.createTransport({
        // Beispiel f√ºr Gmail. F√ºr andere Provider (z.B. SendGrid, Mailgun) anpassen.
        // In einer echten Anwendung sollten diese Werte aus Umgebungsvariablen geladen werden.
        host: process.env.SMTP_HOST || 'smtp.example.com',
        port: process.env.SMTP_PORT || 587,
        secure: false, // true f√ºr 465, false f√ºr andere Ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
      });

      const mailOptions = {
        from: `"System Alert" <${process.env.SMTP_USER}>`,
        to: email.to,
        subject:
          email.subject || `[${level.toUpperCase()}] System Alert: ${message.substring(0, 50)}`,
        text: `Ein System-Alert wurde ausgel√∂st:\n\nLevel: ${level.toUpperCase()}\nNachricht: ${message}\n\nZus√§tzliche Daten:\n${JSON.stringify(extra, null, 2)}`,
        html: `<h1>System Alert</h1>
               <p><b>Level:</b> ${level.toUpperCase()}</p>
               <p><b>Nachricht:</b> ${message}</p>
               <hr>
               <h3>Zus√§tzliche Daten:</h3>
               <pre>${JSON.stringify(extra, null, 2)}</pre>`,
      };

      const info = await transporter.sendMail(mailOptions);
      console.log('E-Mail-Benachrichtigung gesendet:', info.messageId);
    } catch (error) {
      console.error('Fehler beim Senden der E-Mail-Benachrichtigung:', error);
    }
  }

  // GitHub Issue erstellen (nur bei Fehlern und wenn aktiviert)
  if (createIssue) {
    try {
      const issueTitle = `[${level.toUpperCase()}] ${message}`;
      const issueBody = `**Fehlerdetails:**\n\n\`\`\`json\n${JSON.stringify(extra, null, 2)}\n\`\`\`\n\n**Kontext:**\n\nDieser Fehler wurde vom automatisierten System-Monitoring erkannt. Bitte untersuchen Sie die Ursache und beheben Sie das Problem.`;

      // Labels je nach Dringlichkeit anpassen
      const labels = ['bug', 'autogenerated', 'critical-alert'];

      createGitHubIssue(issueTitle, issueBody, labels)
        .then((issueUrl) => console.log(`üîó GitHub Issue wurde erstellt: ${issueUrl}`))
        .catch((err) =>
          console.error(
            `Fehler beim Erstellen des GitHub Issues aus dem Alert-Service: ${err.message}`,
          ),
        );
    } catch (err) {
      console.error(`Konnte GitHub Issue nicht erstellen: ${err.message}`);
    }
  }

  if (!webhookUrl && !createIssue && !email) {
    // Fallback: Logge Alert lokal, wenn keine Benachrichtigungsmethode konfiguriert ist
    console.error('ALERT:', payload);
  }
}

module.exports = { sendAlert };
