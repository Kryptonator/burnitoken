class PriceOracleRecovery { constructor() { this.backupInterval = 5 * 60 * 1000; this.backupKey = 'xrp_oracle_backup'; this.maxBackupAge = 24 * 60 * 60 * 1000; this.recoveryAttempts = 0; this.maxRecoveryAttempts = 3; this.startBackupSystem(); this.setupEventListeners(); console.log('üõ°Ô∏è Price Oracle Recovery System initialized')} startBackupSystem() { this.createBackup(); setInterval(() => { this.createBackup()}, this.backupInterval); setInterval( () => { this.cleanupOldBackups()}, 60 * 60 * 1000, )} setupEventListeners() { window.addEventListener('xrpOracleAlert', (e) => { this.handleOracleAlert(e.detail)}); document.addEventListener('visibilitychange', () => { if (!document.hidden) { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } this.checkOracleHealth()} }); window.addEventListener('online', () => { console.log('üåê Network restored - checking Oracle health'); this.checkOracleHealth()}); window.addEventListener('offline', () => { console.log('üåê Network lost - activating emergency mode'); this.activateEmergencyMode()})} createBackup() { try { if (!window.xrpOracle) return; const backupData = { timestamp: Date.now(), version: '1.0.0', state: window.xrpOracle.getState(), healthReport: window.getXRPOracleHealth(), cacheSnapshot: this.getCacheSnapshot(), configuration: { refreshInterval: window.xrpOracle.config?.refreshInterval, cacheExpiry: window.xrpOracle.config?.cacheExpiry, maxRetryAttempts: window.xrpOracle.config?.maxRetryAttempts, }, }; const backups = this.getBackups(); backups.push(backupData); const cutoffTime = Date.now() - this.maxBackupAge; const filteredBackups = backups.filter((backup) => backup.timestamp > cutoffTime); localStorage.setItem(this.backupKey, JSON.stringify(filteredBackups.slice(-50))); console.log('üíæ Oracle backup created')} catch (error) { console.error('‚ùå Backup creation failed:', error)} } getCacheSnapshot() { if (!window.xrpOracle || !window.xrpOracle.cache) return {}; const snapshot = {}; window.xrpOracle.cache.forEach((value, key) => { snapshot[key] = value}); return snapshot} getBackups() { try { const backupsJson = localStorage.getItem(this.backupKey); return backupsJson ? JSON.parse(backupsJson) : []} catch (error) { console.error('‚ùå Failed to load backups:', error); return []} } getLatestValidBackup() { const backups = this.getBackups(); const sortedBackups = backups.sort((a, b) => b.timestamp - a.timestamp); for (const backup of sortedBackups) { if (this.validateBackup(backup)) { return backup} } return null} validateBackup(backup) { if (!backup || typeof backup !== 'object') return false; if (!backup.timestamp || !backup.state) return false; if (!backup.healthReport || !backup.cacheSnapshot) return false; const age = Date.now() - backup.timestamp; if (age > this.maxBackupAge) return false; if (backup.state.data && backup.state.data.price) { const price = parseFloat(backup.state.data.price); if (isNaN(price) || price <= 0 || price > 10000) return false} return true} async restoreFromBackup(backup = null) { try { const backupData = backup || this.getLatestValidBackup(); if (!backupData) { throw new Error('No valid backup found')} console.log('üîÑ Restoring Oracle from backup...'); if (!window.xrpOracle) { window.initXRPPriceOracle(); await this.sleep(2000)} if (backupData.cacheSnapshot && window.xrpOracle.cache) { window.xrpOracle.cache.clear(); Object.entries(backupData.cacheSnapshot).forEach(([key, value]) => { window.xrpOracle.cache.set(key, value)})} if (backupData.state && backupData.state.data) { window.xrpOracle.updateState({ status: 'success', data: backupData.state.data, currentApi: backupData.state.currentApi || 'Backup', lastUpdate: backupData.timestamp, error: null, })} if (window.xrpOracle.updateUI) { window.xrpOracle.updateUI()} console.log('‚úÖ Oracle restored from backup successfully'); setTimeout(() => { if (window.xrpOracle && window.xrpOracle.fetchPrice) { window.xrpOracle.fetchPrice().catch(console.error)} }, 1000); return true} catch (error) { console.error('‚ùå Oracle restoration failed:', error); return false} } async handleOracleAlert(alertDetail) { console.log('üö® Recovery system handling alert:', alertDetail); if (alertDetail.type === 'consecutive_failures' && alertDetail.count >= 3) { console.log('üîÑ Triggering automatic recovery...'); this.recoveryAttempts++; if (this.recoveryAttempts <= this.maxRecoveryAttempts) { const restored = await this.restoreFromBackup(); if (restored) { console.log('‚úÖ Automatic recovery successful'); this.recoveryAttempts = 0} else { console.error('‚ùå Automatic recovery failed'); if (this.recoveryAttempts >= this.maxRecoveryAttempts) { this.activateEmergencyMode()} } } else { console.error('üö® Max recovery attempts reached - activating emergency mode'); this.activateEmergencyMode()} } } async checkOracleHealth() { try { if (!window.xrpOracle) { console.log('üîÑ Oracle not found - attempting to restore...'); await this.restoreFromBackup(); return} const health = window.getXRPOracleHealth(); if (!health || !health.healthy) { console.log('üîÑ Oracle unhealthy - attempting recovery...'); if (window.xrpOracle.stop && window.xrpOracle.start) { window.xrpOracle.stop(); await this.sleep(2000); window.xrpOracle.start(); await this.sleep(5000); const newHealth = window.getXRPOracleHealth(); if (!newHealth || !newHealth.healthy) { await this.restoreFromBackup()} } } } catch (error) { console.error('‚ùå Health check failed:', error)} } activateEmergencyMode() { console.warn('üö® EMERGENCY MODE ACTIVATED - Using static fallback data'); const backup = this.getLatestValidBackup(); if (backup && backup.state && backup.state.data) { this.displayEmergencyData(backup.state.data, backup.timestamp)} else { this.displayEmergencyError()} this.showEmergencyNotification(); setInterval( () => { console.log('üîÑ Emergency mode - attempting recovery...'); this.checkOracleHealth()}, 5 * 60 * 1000, )} displayEmergencyData(data, timestamp) { const widgets = document.querySelectorAll('[id*="xrp-price"], [id*="price-widget"]'); widgets.forEach((widget) => { const priceElement = widget.querySelector('.price-value, .price'); const statusElement = widget.querySelector('.price-status, .status'); if (priceElement) { priceElement.innerHTML = `$${data.price.toFixed(6)}`; priceElement.style.opacity = '0.7'} if (statusElement) { statusElement.innerHTML = 'üö® Emergency Mode'; statusElement.className = 'price-status status-emergency'; statusElement.title = `Last update: ${new Date(timestamp).toLocaleString()}`} widget.style.border = '2px solid #f59e0b'; widget.style.backgroundColor = 'rgba(245, 158, 11, 0.1)'})} displayEmergencyError() { const widgets = document.querySelectorAll('[id*="xrp-price"], [id*="price-widget"]'); widgets.forEach((widget) => { widget.innerHTML = ` <div class="emergency-error"> <div class="error-icon">‚ö†Ô∏è</div> <div class="error-text">Price Service Unavailable</div> <div class="error-subtitle">Emergency maintenance mode</div> </div> `; widget.style.border = '2px solid #ef4444'; widget.style.backgroundColor = 'rgba(239, 68, 68, 0.1)'})} showEmergencyNotification() { const notification = document.createElement('div'); notification.id = 'emergency-notification'; notification.innerHTML = ` <div style=" position: fixed; top: 20px; right: 20px; background: #f59e0b; color: white; padding: 15px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 9999; font-weight: 500; max-width: 300px; "> üö® Price Service Recovery Mode <div style="font-size: 0.9em; margin-top: 5px; opacity: 0.9;"> Displaying emergency data while reconnecting... </div> </div> `; document.body.appendChild(notification); setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification)} }, 10000)} cleanupOldBackups() { try { const backups = this.getBackups(); const cutoffTime = Date.now() - this.maxBackupAge; const validBackups = backups.filter( (backup) => backup.timestamp > cutoffTime && this.validateBackup(backup), ); if (validBackups.length < backups.length) { localStorage.setItem(this.backupKey, JSON.stringify(validBackups)); console.log(`üßπ Cleaned up ${backups.length - validBackups.length} old backups`)} } catch (error) { console.error('‚ùå Backup cleanup failed:', error)} } exportBackups() { const backups = this.getBackups(); const exportData = { exportDate: new Date().toISOString(), backupCount: backups.length, backups: backups, }; const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `xrp-oracle-backups-${Date.now()}.json`; a.click(); URL.revokeObjectURL(url); console.log('üíæ Backups exported')} importBackups(backupData) { try { if (!backupData || !backupData.backups || !Array.isArray(backupData.backups)) { throw new Error('Invalid backup data format')} const validBackups = backupData.backups.filter((backup) => this.validateBackup(backup)); if (validBackups.length === 0) { throw new Error('No valid backups found in import data')} const existingBackups = this.getBackups(); const allBackups = [...existingBackups, ...validBackups]; const uniqueBackups = allBackups .filter( (backup, index, arr) => arr.findIndex((b) => b.timestamp === backup.timestamp) === index, ) .sort((a, b) => b.timestamp - a.timestamp) .slice(0, 50); localStorage.setItem(this.backupKey, JSON.stringify(uniqueBackups)); console.log(`‚úÖ Imported ${validBackups.length} valid backups`); return true} catch (error) { console.error('‚ùå Backup import failed:', error); return false} } getStatus() { const backups = this.getBackups(); const latestBackup = this.getLatestValidBackup(); return { isActive: true, backupCount: backups.length, latestBackupAge: latestBackup ? Date.now() - latestBackup.timestamp : null, recoveryAttempts: this.recoveryAttempts, maxRecoveryAttempts: this.maxRecoveryAttempts, emergencyModeActive: document.getElementById('emergency-notification') !== null, }} async manualRecovery() { console.log('üîÑ Manual recovery initiated...'); this.recoveryAttempts = 0; return await this.restoreFromBackup()} sleep(ms) { return new Promise((resolve) => setTimeout(resolve, ms))} } const priceOracleRecovery = new PriceOracleRecovery(); window.priceOracleRecovery = priceOracleRecovery; console.log('üõ°Ô∏è Price Oracle Recovery System loaded'); console.log('Available commands:'); console.log('- priceOracleRecovery.manualRecovery() - Trigger manual recovery'); console.log('- priceOracleRecovery.getStatus() - Get recovery system status'); console.log('- priceOracleRecovery.exportBackups() - Export backup data'); console.log('- priceOracleRecovery.createBackup() - Create immediate backup'); function constructor(...args) { console.log('constructor aufgerufen mit Argumenten:', args); return undefined} function startBackupSystem(...args) { console.log('startBackupSystem aufgerufen mit Argumenten:', args); return undefined} function setupEventListeners(...args) { console.log('setupEventListeners aufgerufen mit Argumenten:', args); return undefined} function log(...args) { console.log('log aufgerufen mit Argumenten:', args); return undefined} function createBackup(...args) { console.log('createBackup aufgerufen mit Argumenten:', args); return undefined} function cleanupOldBackups(...args) { console.log('cleanupOldBackups aufgerufen mit Argumenten:', args); return undefined} function addEventListener(...args) { console.log('addEventListener aufgerufen mit Argumenten:', args); return undefined} function handleOracleAlert(...args) { console.log('handleOracleAlert aufgerufen mit Argumenten:', args); return undefined} function if(...args) { console.log('if aufgerufen mit Argumenten:', args); return undefined} function checkOracleHealth(...args) { console.log('checkOracleHealth aufgerufen mit Argumenten:', args); return undefined} function activateEmergencyMode(...args) { console.log('activateEmergencyMode aufgerufen mit Argumenten:', args); return undefined} function now(...args) { console.log('now aufgerufen mit Argumenten:', args); return undefined} function getState(...args) { console.log('getState aufgerufen mit Argumenten:', args); return undefined} function getXRPOracleHealth(...args) { console.log('getXRPOracleHealth aufgerufen mit Argumenten:', args); return undefined} function getCacheSnapshot(...args) { console.log('getCacheSnapshot aufgerufen mit Argumenten:', args); return undefined} function getBackups(...args) { console.log('getBackups aufgerufen mit Argumenten:', args); return undefined} function push(...args) { console.log('push aufgerufen mit Argumenten:', args); return undefined} function backups(...args) { console.log('backups aufgerufen mit Argumenten:', args); return undefined} function filter(...args) { console.log('filter aufgerufen mit Argumenten:', args); return undefined} function setItem(...args) { console.log('setItem aufgerufen mit Argumenten:', args); return undefined} function stringify(...args) { console.log('stringify aufgerufen mit Argumenten:', args); return undefined} function slice(...args) { console.log('slice aufgerufen mit Argumenten:', args); return undefined} function catch(...args) { console.log('catch aufgerufen mit Argumenten:', args); return undefined} function error(...args) { console.log('error aufgerufen mit Argumenten:', args); return undefined} function forEach(...args) { console.log('forEach aufgerufen mit Argumenten:', args); return undefined} function getItem(...args) { console.log('getItem aufgerufen mit Argumenten:', args); return undefined} function parse(...args) { console.log('parse aufgerufen mit Argumenten:', args); return undefined} function getLatestValidBackup(...args) { console.log('getLatestValidBackup aufgerufen mit Argumenten:', args); return undefined} function timestamp(...args) { console.log('timestamp aufgerufen mit Argumenten:', args); return undefined} function sort(...args) { console.log('sort aufgerufen mit Argumenten:', args); return undefined} function for(...args) { console.log('for aufgerufen mit Argumenten:', args); return undefined} function validateBackup(...args) { console.log('validateBackup aufgerufen mit Argumenten:', args); return undefined} function isNaN(...args) { console.log('isNaN aufgerufen mit Argumenten:', args); return undefined} function restoreFromBackup(...args) { console.log('restoreFromBackup aufgerufen mit Argumenten:', args); return undefined} function initXRPPriceOracle(...args) { console.log('initXRPPriceOracle aufgerufen mit Argumenten:', args); return undefined} function sleep(...args) { console.log('sleep aufgerufen mit Argumenten:', args); return undefined} function clear(...args) { console.log('clear aufgerufen mit Argumenten:', args); return undefined} function entries(...args) { console.log('entries aufgerufen mit Argumenten:', args); return undefined} function set(...args) { console.log('set aufgerufen mit Argumenten:', args); return undefined} function updateState(...args) { console.log('updateState aufgerufen mit Argumenten:', args); return undefined} function updateUI(...args) { console.log('updateUI aufgerufen mit Argumenten:', args); return undefined} function fetchPrice(...args) { console.log('fetchPrice aufgerufen mit Argumenten:', args); return undefined} function stop(...args) { console.log('stop aufgerufen mit Argumenten:', args); return undefined} function start(...args) { console.log('start aufgerufen mit Argumenten:', args); return undefined} function warn(...args) { console.log('warn aufgerufen mit Argumenten:', args); return undefined} function displayEmergencyData(...args) { console.log('displayEmergencyData aufgerufen mit Argumenten:', args); return undefined} function displayEmergencyError(...args) { console.log('displayEmergencyError aufgerufen mit Argumenten:', args); return undefined} function showEmergencyNotification(...args) { console.log('showEmergencyNotification aufgerufen mit Argumenten:', args); return undefined} function querySelectorAll(...args) { console.log('querySelectorAll aufgerufen mit Argumenten:', args); return undefined} function querySelector(...args) { console.log('querySelector aufgerufen mit Argumenten:', args); return undefined} function toFixed(...args) { console.log('toFixed aufgerufen mit Argumenten:', args); return undefined} function toLocaleString(...args) { console.log('toLocaleString aufgerufen mit Argumenten:', args); return undefined} function rgba(...args) { console.log('rgba aufgerufen mit Argumenten:', args); return undefined} function createElement(...args) { console.log('createElement aufgerufen mit Argumenten:', args); return undefined} function appendChild(...args) { console.log('appendChild aufgerufen mit Argumenten:', args); return undefined} function removeChild(...args) { console.log('removeChild aufgerufen mit Argumenten:', args); return undefined} function exportBackups(...args) { console.log('exportBackups aufgerufen mit Argumenten:', args); return undefined} function toISOString(...args) { console.log('toISOString aufgerufen mit Argumenten:', args); return undefined} function Blob(...args) { console.log('Blob aufgerufen mit Argumenten:', args); return undefined} function createObjectURL(...args) { console.log('createObjectURL aufgerufen mit Argumenten:', args); return undefined} function click(...args) { console.log('click aufgerufen mit Argumenten:', args); return undefined} function revokeObjectURL(...args) { console.log('revokeObjectURL aufgerufen mit Argumenten:', args); return undefined} function importBackups(...args) { console.log('importBackups aufgerufen mit Argumenten:', args); return undefined} function isArray(...args) { console.log('isArray aufgerufen mit Argumenten:', args); return undefined} function findIndex(...args) { console.log('findIndex aufgerufen mit Argumenten:', args); return undefined} function getStatus(...args) { console.log('getStatus aufgerufen mit Argumenten:', args); return undefined} function getElementById(...args) { console.log('getElementById aufgerufen mit Argumenten:', args); return undefined} function manualRecovery(...args) { console.log('manualRecovery aufgerufen mit Argumenten:', args); return undefined} function PriceOracleRecovery(...args) { console.log('PriceOracleRecovery aufgerufen mit Argumenten:', args); return undefined}