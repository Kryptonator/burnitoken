class SystemStatusDashboard { constructor(config = {}) { this.config = { refreshInterval: 5000, maxHistoryEntries: 100, alertDisplayTime: 5000, components: [ 'priceOracle', 'monitoring', 'security', 'seo', 'recovery' ], theme: 'dark', compactMode: false, showDetailed: true, adminMode: false, debugMode: process.env.NODE_ENV === 'development', ...config }; this.state = { initialized: false, systems: {}, alerts: [], metrics: new Map(), history: [], dashboardVisible: false }; this.dashboardElement = null; this.intervals = new Map(); this.init()} async init() { console.log('üìä Initializing System Status Dashboard...'); try { await this.waitForSystems(); this.createDashboard(); this.setupKeyboardShortcuts(); this.startMonitoring(); this.state.initialized = true; console.log('‚úÖ System Status Dashboard initialized')} catch (error) { console.error('‚ùå Failed to initialize dashboard:', error)} } async waitForSystems() { const maxWait = 10000; const checkInterval = 100; let waited = 0; while (waited < maxWait) { const systemsReady = this.checkSystemsReady(); if (systemsReady) { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } console.log('‚úÖ All systems ready for dashboard'); return} await new Promise(resolve => setTimeout(resolve, checkInterval)); waited += checkInterval} console.warn('‚ö†Ô∏è Some systems may not be ready, proceeding anyway')} checkSystemsReady() { const systems = { priceOracle: window.burniOracle, monitoring: window.burniMonitoring, security: window.burniSecurity, seo: window.burniSEO }; return Object.values(systems).every(system => system && system.getState)} createDashboard() { this.dashboardElement = document.createElement('div'); this.dashboardElement.id = 'burni-system-dashboard'; this.dashboardElement.className = `burni-dashboard ${this.config.theme}`; this.dashboardElement.style.cssText = ` position: fixed; top: 0; right: -400px; width: 400px; height: 100vh; background: ${this.config.theme === 'dark' ? '#1a1a1a' : '#ffffff'}; color: ${this.config.theme === 'dark' ? '#ffffff' : '#000000'}; border-left: 2px solid ${this.config.theme === 'dark' ? '#333' : '#ccc'}; box-shadow: -2px 0 10px rgba(0,0,0,0.3); z-index: 10000; transition: right 0.3s ease; overflow-y: auto; font-family: 'Courier New', monospace; font-size: 12px; `; this.dashboardElement.innerHTML = this.generateDashboardHTML(); document.body.appendChild(this.dashboardElement); this.setupDashboardEvents(); console.log('üñ•Ô∏è Dashboard UI created')} generateDashboardHTML() { return ` <div class="dashboard-header" style="padding: 15px; border-bottom: 1px solid #333; position: sticky; top: 0; background: inherit;"> <div style="display: flex; justify-content: space-between; align-items: center;"> <h3 style="margin: 0; color: #ff6b35;">üî• BurniToken Status</h3> <button id="close-dashboard" style="background: none; border: none; color: inherit; font-size: 18px; cursor: pointer;">√ó</button> </div> <div style="font-size: 10px; opacity: 0.7; margin-top: 5px;"> Press Ctrl+Shift+D to toggle </div> </div> <div class="dashboard-content" style="padding: 15px;"> <div id="system-status" class="section"> <h4 style="color: #4caf50; margin: 0 0 10px 0;">‚ö° System Status</h4> <div id="status-indicators"></div> </div> <div id="performance-metrics" class="section" style="margin-top: 20px;"> <h4 style="color: #2196f3; margin: 0 0 10px 0;">üìä Performance</h4> <div id="metrics-display"></div> </div> <div id="security-alerts" class="section" style="margin-top: 20px;"> <h4 style="color: #ff9800; margin: 0 0 10px 0;">üõ°Ô∏è Security</h4> <div id="security-display"></div> </div> <div id="seo-analytics" class="section" style="margin-top: 20px;"> <h4 style="color: #9c27b0; margin: 0 0 10px 0;">üîç SEO Analytics</h4> <div id="seo-display"></div> </div> <div id="recent-alerts" class="section" style="margin-top: 20px;"> <h4 style="color: #f44336; margin: 0 0 10px 0;">üö® Recent Alerts</h4> <div id="alerts-display"></div> </div> <div id="quick-actions" class="section" style="margin-top: 20px;"> <h4 style="color: #607d8b; margin: 0 0 10px 0;">‚ö° Quick Actions</h4> <div id="actions-display"></div> </div> </div> `} setupDashboardEvents() { const closeBtn = this.dashboardElement.querySelector('#close-dashboard'); closeBtn.addEventListener('click', () => this.hideDashboard()); this.setupQuickActions()} setupQuickActions() { const actionsContainer = this.dashboardElement.querySelector('#actions-display'); const actions = [ { id: 'refresh-price', label: 'üí∞ Refresh Price', action: () => this.refreshPrice() }, { id: 'force-backup', label: 'üíæ Force Backup', action: () => this.forceBackup() }, { id: 'security-scan', label: 'üîç Security Scan', action: () => this.runSecurityScan() }, { id: 'seo-audit', label: 'üìà SEO Audit', action: () => this.runSEOAudit() }, { id: 'clear-alerts', label: 'üóëÔ∏è Clear Alerts', action: () => this.clearAlerts() }, { id: 'export-logs', label: 'üì§ Export Logs', action: () => this.exportLogs() } ]; actionsContainer.innerHTML = actions.map(action => `<button id="${action.id}" class="action-btn" style=" display: block; width: 100%; margin: 5px 0; padding: 8px; background: #333; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px; transition: background 0.2s; " onmouseover="this.style.background='#555'" onmouseout="this.style.background='#333'"> ${action.label} </button>` ).join(''); actions.forEach(action => { const btn = this.dashboardElement.querySelector(`#${action.id}`); btn.addEventListener('click', action.action)})} setupKeyboardShortcuts() { document.addEventListener('keydown', (event) => { if (event.ctrlKey && event.shiftKey && event.key === 'D') { event.preventDefault(); this.toggleDashboard()} if (event.key === 'Escape' && this.state.dashboardVisible) { this.hideDashboard()} })} startMonitoring() { const monitoringInterval = setInterval(() => { this.updateDashboard()}, this.config.refreshInterval); this.intervals.set('monitoring', monitoringInterval); const cleanupInterval = setInterval(() => { this.cleanupHistory()}, 60000); this.intervals.set('cleanup', cleanupInterval); console.log('üîÑ Dashboard monitoring started')} updateDashboard() { if (!this.state.dashboardVisible) return; try { const systemData = this.collectSystemData(); this.updateSystemStatus(systemData); this.updatePerformanceMetrics(systemData); this.updateSecurityDisplay(systemData); this.updateSEODisplay(systemData); this.updateAlertsDisplay(systemData); this.addToHistory(systemData)} catch (error) { console.error('Dashboard update error:', error)} } collectSystemData() { const data = { timestamp: Date.now(), systems: {} }; if (window.burniOracle) { try { data.systems.priceOracle = { status: 'active', data: window.burniOracle.getState() }} catch (error) { data.systems.priceOracle = { status: 'error', error: error.message }} } if (window.burniMonitoring) { try { data.systems.monitoring = { status: 'active', data: window.burniMonitoring.getState() }} catch (error) { data.systems.monitoring = { status: 'error', error: error.message }} } if (window.burniSecurity) { try { data.systems.security = { status: 'active', data: window.burniSecurity.getSecurityStatus() }} catch (error) { data.systems.security = { status: 'error', error: error.message }} } if (window.burniSEO) { try { data.systems.seo = { status: 'active', data: window.burniSEO.getSEOReport() }} catch (error) { data.systems.seo = { status: 'error', error: error.message }} } return data} updateSystemStatus(data) { const container = this.dashboardElement.querySelector('#status-indicators'); const statusHTML = Object.entries(data.systems).map(([name, system]) => { const statusColor = system.status === 'active' ? '#4caf50' : system.status === 'error' ? '#f44336' : '#ff9800'; const statusIcon = system.status === 'active' ? '‚úÖ' : system.status === 'error' ? '‚ùå' : '‚ö†Ô∏è'; return ` <div style="display: flex; justify-content: space-between; align-items: center; margin: 5px 0; padding: 5px; background: rgba(255,255,255,0.05); border-radius: 3px;"> <span>${statusIcon} ${name}</span> <span style="color: ${statusColor}; font-weight: bold;">${system.status.toUpperCase()}</span> </div> `}).join(''); container.innerHTML = statusHTML} updatePerformanceMetrics(data) { const container = this.dashboardElement.querySelector('#metrics-display'); const metrics = []; if (data.systems.priceOracle?.data?.price) { metrics.push({ label: 'BTC Price', value: `$${data.systems.priceOracle.data.price.toLocaleString()}`, color: '#4caf50' })} if (window.performance) { const memory = (window.performance as any).memory; if (memory) { metrics.push({ label: 'Memory Usage', value: `${Math.round(memory.usedJSHeapSize / 1024 / 1024)}MB`, color: '#2196f3' })} } const loadTime = window.performance?.timing ? window.performance.timing.loadEventEnd - window.performance.timing.navigationStart : 0; if (loadTime > 0) { metrics.push({ label: 'Load Time', value: `${Math.round(loadTime)}ms`, color: loadTime < 3000 ? '#4caf50' : '#ff9800' })} const metricsHTML = metrics.map(metric => ` <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>${metric.label}</span> <span style="color: ${metric.color}; font-weight: bold;">${metric.value}</span> </div> `).join(''); container.innerHTML = metricsHTML || '<div style="opacity: 0.7;">No metrics available</div>'} updateSecurityDisplay(data) { const container = this.dashboardElement.querySelector('#security-display'); if (data.systems.security?.data) { const security = data.systems.security.data; const securityHTML = ` <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>ü§ñ Detected Bots</span> <span style="color: ${security.threats?.detectedThreats > 0 ? '#ff9800' : '#4caf50'}"> ${security.threats?.detectedThreats || 0} </span> </div> <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>üö´ Blocked IPs</span> <span style="color: ${security.threats?.blockedIPs > 0 ? '#ff9800' : '#4caf50'}"> ${security.threats?.blockedIPs || 0} </span> </div> <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>üö® Recent Incidents</span> <span style="color: ${security.threats?.recentIncidents?.length > 0 ? '#f44336' : '#4caf50'}"> ${security.threats?.recentIncidents?.length || 0} </span> </div> `; container.innerHTML = securityHTML} else { container.innerHTML = '<div style="opacity: 0.7;">Security data unavailable</div>'} } updateSEODisplay(data) { const container = this.dashboardElement.querySelector('#seo-display'); if (data.systems.seo?.data) { const seo = data.systems.seo.data; const seoHTML = ` <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>üìä SEO Score</span> <span style="color: ${seo.score?.score >= 80 ? '#4caf50' : seo.score?.score >= 60 ? '#ff9800' : '#f44336'}"> ${seo.score?.score || 0}/100 </span> </div> <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>üëÄ Page Views</span> <span style="color: #2196f3;"> ${seo.performance?.pageViews || 0} </span> </div> <div style="display: flex; justify-content: space-between; margin: 5px 0;"> <span>‚ö†Ô∏è Issues</span> <span style="color: ${seo.optimizations?.length > 0 ? '#ff9800' : '#4caf50'}"> ${seo.optimizations?.length || 0} </span> </div> `; container.innerHTML = seoHTML} else { container.innerHTML = '<div style="opacity: 0.7;">SEO data unavailable</div>'} } updateAlertsDisplay(data) { const container = this.dashboardElement.querySelector('#alerts-display'); let allAlerts = []; Object.values(data.systems).forEach(system => { if (system.data?.alerts) { allAlerts = allAlerts.concat(system.data.alerts)} }); allAlerts.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0)); const recentAlerts = allAlerts.slice(0, 5); if (recentAlerts.length === 0) { container.innerHTML = '<div style="opacity: 0.7;">No recent alerts</div>'; return} const alertsHTML = recentAlerts.map(alert => { const severityColor = { 'critical': '#f44336', 'high': '#ff9800', 'medium': '#ff9800', 'low': '#4caf50' }[alert.severity] || '#607d8b'; const timeAgo = this.formatTimeAgo(alert.timestamp); return ` <div style="margin: 5px 0; padding: 5px; background: rgba(255,255,255,0.03); border-radius: 3px; border-left: 3px solid ${severityColor};"> <div style="font-weight: bold; color: ${severityColor};"> ${alert.type || 'Unknown'} </div> <div style="font-size: 10px; opacity: 0.8; margin-top: 2px;"> ${alert.message || 'No message'} </div> <div style="font-size: 9px; opacity: 0.6; margin-top: 2px;"> ${timeAgo} </div> </div> `}).join(''); container.innerHTML = alertsHTML} formatTimeAgo(timestamp) { if (!timestamp) return 'Unknown time'; const now = Date.now(); const diff = now - timestamp; if (diff < 60000) return `${Math.floor(diff / 1000)}s ago`; if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`; if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`; return `${Math.floor(diff / 86400000)}d ago`} addToHistory(data) { this.state.history.push(data); if (this.state.history.length > this.config.maxHistoryEntries) { this.state.history.shift()} } cleanupHistory() { const oneHourAgo = Date.now() - 3600000; this.state.history = this.state.history.filter( entry => entry.timestamp > oneHourAgo )} refreshPrice() { if (window.burniOracle) { window.burniOracle.forceRefresh(); this.showNotification('üí∞ Price refresh triggered', 'success')} } forceBackup() { this.showNotification('üíæ Backup triggered (simulated)', 'info')} runSecurityScan() { if (window.burniSecurity) { this.showNotification('üîç Security scan running...', 'info')} } runSEOAudit() { if (window.burniSEO) { window.burniSEO.optimizeCurrentPage(); this.showNotification('üìà SEO audit completed', 'success')} } clearAlerts() { this.state.alerts = []; this.showNotification('üóëÔ∏è Alerts cleared', 'success')} exportLogs() { const logs = { timestamp: new Date().toISOString(), history: this.state.history, alerts: this.state.alerts, systems: this.state.systems }; const blob = new Blob([JSON.stringify(logs, null, 2)], { type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `burnitoken-logs-${Date.now()}.json`; a.click(); URL.revokeObjectURL(url); this.showNotification('üì§ Logs exported', 'success')} showNotification(message, type = 'info') { const notification = document.createElement('div'); notification.style.cssText = ` position: fixed; top: 20px; right: 20px; padding: 15px 20px; background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'}; color: white; border-radius: 5px; z-index: 10001; font-family: Arial, sans-serif; font-size: 14px; box-shadow: 0 2px 10px rgba(0,0,0,0.3); animation: slideIn 0.3s ease; `; notification.textContent = message; document.body.appendChild(notification); setTimeout(() => { notification.remove()}, this.config.alertDisplayTime)} toggleDashboard() { if (this.state.dashboardVisible) { this.hideDashboard()} else { this.showDashboard()} } showDashboard() { this.dashboardElement.style.right = '0'; this.state.dashboardVisible = true; this.updateDashboard(); document.body.style.marginRight = '400px'} hideDashboard() { this.dashboardElement.style.right = '-400px'; this.state.dashboardVisible = false; document.body.style.marginRight = '0'} getSystemStatus() { return { initialized: this.state.initialized, visible: this.state.dashboardVisible, systems: Object.keys(this.state.systems).length, alerts: this.state.alerts.length, historyEntries: this.state.history.length }} destroy() { for (const [name, intervalId] of this.intervals.entries()) { clearInterval(intervalId)} this.intervals.clear(); if (this.dashboardElement) { this.dashboardElement.remove()} document.body.style.marginRight = '0'; console.log('üí• System Status Dashboard destroyed')} } window.SystemStatusDashboard = SystemStatusDashboard; if (typeof window !== 'undefined') { window.addEventListener('DOMContentLoaded', () => { setTimeout(() => { window.burniDashboard = new SystemStatusDashboard()}, 2000)})} function constructor(...args) { console.log('constructor aufgerufen mit Argumenten:', args); return undefined} function Map(...args) { console.log('Map aufgerufen mit Argumenten:', args); return undefined} function init(...args) { console.log('init aufgerufen mit Argumenten:', args); return undefined} function log(...args) { console.log('log aufgerufen mit Argumenten:', args); return undefined} function waitForSystems(...args) { console.log('waitForSystems aufgerufen mit Argumenten:', args); return undefined} function createDashboard(...args) { console.log('createDashboard aufgerufen mit Argumenten:', args); return undefined} function setupKeyboardShortcuts(...args) { console.log('setupKeyboardShortcuts aufgerufen mit Argumenten:', args); return undefined} function startMonitoring(...args) { console.log('startMonitoring aufgerufen mit Argumenten:', args); return undefined} function catch(...args) { console.log('catch aufgerufen mit Argumenten:', args); return undefined} function error(...args) { console.log('error aufgerufen mit Argumenten:', args); return undefined} function while(...args) { console.log('while aufgerufen mit Argumenten:', args); return undefined} function checkSystemsReady(...args) { console.log('checkSystemsReady aufgerufen mit Argumenten:', args); return undefined} function if(...args) { console.log('if aufgerufen mit Argumenten:', args); return undefined} function warn(...args) { console.log('warn aufgerufen mit Argumenten:', args); return undefined} function values(...args) { console.log('values aufgerufen mit Argumenten:', args); return undefined} function every(...args) { console.log('every aufgerufen mit Argumenten:', args); return undefined} function createElement(...args) { console.log('createElement aufgerufen mit Argumenten:', args); return undefined} function rgba(...args) { console.log('rgba aufgerufen mit Argumenten:', args); return undefined} function generateDashboardHTML(...args) { console.log('generateDashboardHTML aufgerufen mit Argumenten:', args); return undefined} function appendChild(...args) { console.log('appendChild aufgerufen mit Argumenten:', args); return undefined} function setupDashboardEvents(...args) { console.log('setupDashboardEvents aufgerufen mit Argumenten:', args); return undefined} function querySelector(...args) { console.log('querySelector aufgerufen mit Argumenten:', args); return undefined} function addEventListener(...args) { console.log('addEventListener aufgerufen mit Argumenten:', args); return undefined} function hideDashboard(...args) { console.log('hideDashboard aufgerufen mit Argumenten:', args); return undefined} function setupQuickActions(...args) { console.log('setupQuickActions aufgerufen mit Argumenten:', args); return undefined} function refreshPrice(...args) { console.log('refreshPrice aufgerufen mit Argumenten:', args); return undefined} function forceBackup(...args) { console.log('forceBackup aufgerufen mit Argumenten:', args); return undefined} function runSecurityScan(...args) { console.log('runSecurityScan aufgerufen mit Argumenten:', args); return undefined} function runSEOAudit(...args) { console.log('runSEOAudit aufgerufen mit Argumenten:', args); return undefined} function clearAlerts(...args) { console.log('clearAlerts aufgerufen mit Argumenten:', args); return undefined} function exportLogs(...args) { console.log('exportLogs aufgerufen mit Argumenten:', args); return undefined} function map(...args) { console.log('map aufgerufen mit Argumenten:', args); return undefined} function join(...args) { console.log('join aufgerufen mit Argumenten:', args); return undefined} function forEach(...args) { console.log('forEach aufgerufen mit Argumenten:', args); return undefined} function preventDefault(...args) { console.log('preventDefault aufgerufen mit Argumenten:', args); return undefined} function toggleDashboard(...args) { console.log('toggleDashboard aufgerufen mit Argumenten:', args); return undefined} function updateDashboard(...args) { console.log('updateDashboard aufgerufen mit Argumenten:', args); return undefined} function set(...args) { console.log('set aufgerufen mit Argumenten:', args); return undefined} function cleanupHistory(...args) { console.log('cleanupHistory aufgerufen mit Argumenten:', args); return undefined} function collectSystemData(...args) { console.log('collectSystemData aufgerufen mit Argumenten:', args); return undefined} function updateSystemStatus(...args) { console.log('updateSystemStatus aufgerufen mit Argumenten:', args); return undefined} function updatePerformanceMetrics(...args) { console.log('updatePerformanceMetrics aufgerufen mit Argumenten:', args); return undefined} function updateSecurityDisplay(...args) { console.log('updateSecurityDisplay aufgerufen mit Argumenten:', args); return undefined} function updateSEODisplay(...args) { console.log('updateSEODisplay aufgerufen mit Argumenten:', args); return undefined} function updateAlertsDisplay(...args) { console.log('updateAlertsDisplay aufgerufen mit Argumenten:', args); return undefined} function addToHistory(...args) { console.log('addToHistory aufgerufen mit Argumenten:', args); return undefined} function now(...args) { console.log('now aufgerufen mit Argumenten:', args); return undefined} function getState(...args) { console.log('getState aufgerufen mit Argumenten:', args); return undefined} function getSecurityStatus(...args) { console.log('getSecurityStatus aufgerufen mit Argumenten:', args); return undefined} function getSEOReport(...args) { console.log('getSEOReport aufgerufen mit Argumenten:', args); return undefined} function entries(...args) { console.log('entries aufgerufen mit Argumenten:', args); return undefined} function toUpperCase(...args) { console.log('toUpperCase aufgerufen mit Argumenten:', args); return undefined} function push(...args) { console.log('push aufgerufen mit Argumenten:', args); return undefined} function toLocaleString(...args) { console.log('toLocaleString aufgerufen mit Argumenten:', args); return undefined} function round(...args) { console.log('round aufgerufen mit Argumenten:', args); return undefined} function concat(...args) { console.log('concat aufgerufen mit Argumenten:', args); return undefined} function timestamp(...args) { console.log('timestamp aufgerufen mit Argumenten:', args); return undefined} function sort(...args) { console.log('sort aufgerufen mit Argumenten:', args); return undefined} function slice(...args) { console.log('slice aufgerufen mit Argumenten:', args); return undefined} function formatTimeAgo(...args) { console.log('formatTimeAgo aufgerufen mit Argumenten:', args); return undefined} function floor(...args) { console.log('floor aufgerufen mit Argumenten:', args); return undefined} function shift(...args) { console.log('shift aufgerufen mit Argumenten:', args); return undefined} function filter(...args) { console.log('filter aufgerufen mit Argumenten:', args); return undefined} function forceRefresh(...args) { console.log('forceRefresh aufgerufen mit Argumenten:', args); return undefined} function showNotification(...args) { console.log('showNotification aufgerufen mit Argumenten:', args); return undefined} function triggered(...args) { console.log('triggered aufgerufen mit Argumenten:', args); return undefined} function optimizeCurrentPage(...args) { console.log('optimizeCurrentPage aufgerufen mit Argumenten:', args); return undefined} function toISOString(...args) { console.log('toISOString aufgerufen mit Argumenten:', args); return undefined} function Blob(...args) { console.log('Blob aufgerufen mit Argumenten:', args); return undefined} function stringify(...args) { console.log('stringify aufgerufen mit Argumenten:', args); return undefined} function createObjectURL(...args) { console.log('createObjectURL aufgerufen mit Argumenten:', args); return undefined} function click(...args) { console.log('click aufgerufen mit Argumenten:', args); return undefined} function revokeObjectURL(...args) { console.log('revokeObjectURL aufgerufen mit Argumenten:', args); return undefined} function remove(...args) { console.log('remove aufgerufen mit Argumenten:', args); return undefined} function showDashboard(...args) { console.log('showDashboard aufgerufen mit Argumenten:', args); return undefined} function getSystemStatus(...args) { console.log('getSystemStatus aufgerufen mit Argumenten:', args); return undefined} function keys(...args) { console.log('keys aufgerufen mit Argumenten:', args); return undefined} function destroy(...args) { console.log('destroy aufgerufen mit Argumenten:', args); return undefined} function for(...args) { console.log('for aufgerufen mit Argumenten:', args); return undefined} function clear(...args) { console.log('clear aufgerufen mit Argumenten:', args); return undefined} function SystemStatusDashboard(...args) { console.log('SystemStatusDashboard aufgerufen mit Argumenten:', args); return undefined}