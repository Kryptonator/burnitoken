name: CI - Test and Validate

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ develop, feature/* ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Lint code
        run: node --max-old-space-size=4096 ./node_modules/.bin/eslint .
      - name: 📦 Security/Dependency Audit
        run: npm audit --audit-level=moderate || true
      - name: 🔨 Build project
        run: node --max-old-space-size=4096 ./node_modules/.bin/webpack --config webpack.config.js || npm run build
      - name: 🧪 Run unit tests
        run: node --max-old-space-size=4096 ./node_modules/.bin/jest || npm test
      - name: ✅ Validate HTML
        run: node --max-old-space-size=4096 ./node_modules/.bin/html-validator || npm run validate
      - name: 🚀 Run Lighthouse CI
        run: node --max-old-space-size=4096 ./node_modules/.bin/lhci autorun || npx lhci autorun || true
      - name: 🧪 Run Playwright E2E tests
        run: node --max-old-space-size=4096 ./node_modules/.bin/playwright test || npm run test:e2e
      - name: 🔒 Run npm audit
        run: node --max-old-space-size=4096 ./node_modules/.bin/npm-audit || npm run audit
      - name: 🛡️ Run Snyk test (optional)
        run: node --max-old-space-size=4096 ./node_modules/.bin/snyk test || npm run snyk:test || true
      - name: 📤 Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci
      - name: 📤 Upload Audit Report
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit.json
      # Fehler- und Status-Report generieren
      - name: Fehler- und Status-Report generieren
        id: error_report
        run: |
          node --max-old-space-size=4096 tools/error-collector.js
      - name: ERROR_REPORT.md als Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: ERROR_REPORT.md
      - name: GitHub Issue bei kritischem Fehler
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "🚨 CI-Fehler: ${{ github.workflow }} @ ${{ github.sha }}"
          content-filepath: ERROR_REPORT.md
          labels: bug, automated, ci
      # Self-Healing nur einmal pro Job
      - name: "Self-Healing: Recovery Center Triggern"
        if: failure()
        run: |
          node tools/vscode-recovery-center.js --auto-recover || echo "Recovery Center konnte nicht ausgeführt werden."

      # Recovery-Report nach Self-Healing
      - name: "📄 Recovery-Report generieren"
        if: failure()
        run: node tools/recovery-report.js
      - name: 📤 RECOVERY_REPORT.md als Artefakt hochladen
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: recovery-report
          path: RECOVERY_REPORT.md
      # Alerts (E-Mail, Slack, Discord, Webhook) zentral
      - name: "Kritische Fehler prüfen und Alert senden"
        if: failure() || steps.error_report.outcome == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Kritischer Fehler im CI-Test/Build!'
          to: ${{ secrets.ALERT_EMAIL }}
          from: 'ci-monitor@burnitoken.com'

      - name: Status-Webhook bei Erfolg
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"success","workflow":"CI - Test and Validate"}' ${{ secrets.STATUS_WEBHOOK_URL }}

      - name: Status-Webhook bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"failure","workflow":"CI - Test and Validate"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      # Status-Übersicht immer aktuell halten
      - name: 📄 Status-Übersicht generieren
        run: node tools/update-status-md.js
      - name: 📤 STATUS.md als Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: status-md
          path: STATUS.md
      - name: 📤 STATUS.md ins Repository pushen
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout ${{ github.ref_name }}
          git add STATUS.md
          git commit -m "ci: update STATUS.md [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}
  security:
    name: 🔒 Security & Dependency Check
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔒 Snyk Security Scan
        uses: snyk/actions/node@v3
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        
      # - name: 🛡️ SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   with:
      #     projectBaseDir: .
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   continue-on-error: true
      # Fehler- und Status-Report generieren
      - name: Fehler- und Status-Report generieren
        id: error_report
        run: |
          node --max-old-space-size=4096 tools/error-collector.js
      - name: ERROR_REPORT.md als Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: ERROR_REPORT.md
      - name: GitHub Issue bei kritischem Fehler
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "🚨 CI-Fehler: ${{ github.workflow }} @ ${{ github.sha }}"
          content-filepath: ERROR_REPORT.md
          labels: bug, automated, ci
      # Self-Healing nur einmal pro Job
      - name: "Self-Healing: Recovery Center Triggern"
        if: failure()
        run: |
          node tools/vscode-recovery-center.js --auto-recover || echo "Recovery Center konnte nicht ausgeführt werden."
      # Recovery-Report nach Self-Healing
      - name: "📄 Recovery-Report generieren"
        if: failure()
        run: node tools/recovery-report.js
      - name: 📤 RECOVERY_REPORT.md als Artefakt hochladen
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: recovery-report
          path: RECOVERY_REPORT.md
      # Alerts (E-Mail, Slack, Discord, Webhook) zentral
      - name: "Kritische Fehler prüfen und Alert senden"
        if: failure() || steps.error_report.outcome == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Kritischer Fehler im Security/Dependency-Check!'
          to: ${{ secrets.ALERT_EMAIL }}
          from: 'security-monitor@burnitoken.com'
      - name: Slack-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "text": ":rotating_light: *CI-Fehler bei BurniToken!*\nWorkflow: ci\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Discord-Alert bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{
              "content": ":rotating_light: **CI-Fehler bei BurniToken!**\\nWorkflow: ci\\nCommit: ${{ github.sha }}\\nBranch: ${{ github.ref_name }}\\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' ${{ secrets.DISCORD_WEBHOOK_URL }}
      - name: Status-Webhook bei Erfolg
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"success","workflow":"CI - Test and Validate"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      - name: Status-Webhook bei Fehler
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"status":"failure","workflow":"CI - Test and Validate"}' ${{ secrets.STATUS_WEBHOOK_URL }}
      # Status-Übersicht immer aktuell halten
      - name: 📄 Status-Übersicht generieren
        run: node tools/update-status-md.js
      - name: 📤 STATUS.md als Artefakt hochladen
        uses: actions/upload-artifact@v4
        with:
          name: status-md
          path: STATUS.md
      - name: 📤 STATUS.md ins Repository pushen
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout ${{ github.ref_name }}
          git add STATUS.md
          git commit -m "ci: update STATUS.md [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}