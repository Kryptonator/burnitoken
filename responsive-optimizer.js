#!/usr/bin/env node
/**
 * RESPONSIVE WEBSITE OPTIMIZER
 * Comprehensive tool for optimizing responsive design and mobile experience
 */

const fs = require('fs');
const path = require('path');

// Configuration
const OPTIMIZATION_CONFIG = {
    // Responsive design breakpoints
    breakpoints: {
        mobile: '480px',
        tablet: '768px',
        desktop: '1024px',
        large: '1200px'
    },
    
    // Performance targets
    performance: {
        maxImageSize: 500000, // 500KB
        maxCSSSize: 50000,    // 50KB
        maxJSSize: 100000,    // 100KB
        targetLCP: 2.5,       // Largest Contentful Paint
        targetFID: 100,       // First Input Delay
        targetCLS: 0.1        // Cumulative Layout Shift
    },
    
    // SEO and accessibility
    accessibility: {
        minContrastRatio: 4.5,
        minTouchTarget: 44,
        maxHeadingLevels: 6
    }
};

class ResponsiveOptimizer {
    constructor() {
        this.results = {
            optimizations: [],
            errors: [],
            warnings: [],
            metrics: {}
        };
        this.startTime = Date.now();
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] ${type.toUpperCase()}: ${message}`;
        console.log(logMessage);
        
        if (type === 'error') {
            this.results.errors.push(message);
        } else if (type === 'warning') {
            this.results.warnings.push(message);
        } else {
            this.results.optimizations.push(message);
        }
    }

    async optimizeHTML() {
        this.log('Starting HTML responsive optimization...');
        
        const htmlPath = 'index.html';
        if (!fs.existsSync(htmlPath)) {
            this.log('index.html not found', 'error');
            return;
        }

        let html = fs.readFileSync(htmlPath, 'utf8');
        let modified = false;

        // Optimize viewport meta tag
        if (!html.includes('viewport')) {
            html = html.replace(
                '<head>',
                '<head>\n    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">'
            );
            modified = true;
            this.log('Added responsive viewport meta tag');
        } else if (!html.includes('viewport-fit=cover')) {
            html = html.replace(
                /content="[^"]*"/,
                'content="width=device-width, initial-scale=1.0, viewport-fit=cover"'
            );
            modified = true;
            this.log('Enhanced viewport meta tag with viewport-fit');
        }

        // Add responsive images with srcset
        const imgRegex = /<img([^>]*?)src="([^"]*?)"([^>]*?)>/g;
        html = html.replace(imgRegex, (match, before, src, after) => {
            if (src.includes('.webp') || src.includes('.png') || src.includes('.jpg')) {
                const baseName = src.replace(/\.[^.]+$/, '');
                const ext = src.split('.').pop();
                
                // Create responsive srcset
                const srcset = [
                    `${src} 1x`,
                    `${baseName}-2x.${ext} 2x`
                ].join(', ');
                
                if (!match.includes('srcset')) {
                    modified = true;
                    return `<img${before}src="${src}" srcset="${srcset}" loading="lazy"${after}>`;
                }
            }
            return match;
        });

        // Add preload for critical resources
        if (!html.includes('rel="preload"')) {
            const preloadLinks = `
    <link rel="preload" href="assets/css/styles.min.css" as="style">
    <link rel="preload" href="assets/scripts.min.js" as="script">
    <link rel="preload" href="assets/images/burni-logo.webp" as="image">`;
            
            html = html.replace('</head>', `${preloadLinks}\n</head>`);
            modified = true;
            this.log('Added preload links for critical resources');
        }

        // Enhance touch targets
        html = html.replace(
            /<button([^>]*?)>/g,
            '<button$1 style="min-height: 44px; min-width: 44px; touch-action: manipulation;">'
        );

        if (modified) {
            fs.writeFileSync(htmlPath, html);
            this.log('HTML optimizations applied successfully');
        }
    }

    async optimizeCSS() {
        this.log('Starting CSS responsive optimization...');
        
        const cssPath = 'assets/css/responsive-optimized.css';
        
        const responsiveCSS = `
/* RESPONSIVE OPTIMIZATION CSS */
/* Generated by Responsive Optimizer */

/* Base responsive foundation */
* {
    box-sizing: border-box;
}

html {
    font-size: 16px;
    line-height: 1.6;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
}

body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
}

/* Responsive typography */
h1 { font-size: clamp(1.8rem, 4vw, 3rem); }
h2 { font-size: clamp(1.5rem, 3vw, 2.5rem); }
h3 { font-size: clamp(1.3rem, 2.5vw, 2rem); }
h4 { font-size: clamp(1.1rem, 2vw, 1.5rem); }
h5 { font-size: clamp(1rem, 1.5vw, 1.25rem); }
h6 { font-size: clamp(0.9rem, 1.2vw, 1.1rem); }

p, li {
    font-size: clamp(0.9rem, 1.2vw, 1.1rem);
    line-height: 1.6;
}

/* Container and layout */
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -0.5rem;
}

.col {
    flex: 1;
    padding: 0 0.5rem;
    min-width: 0;
}

/* Responsive grid */
@media (max-width: 768px) {
    .col {
        flex: 100%;
        margin-bottom: 1rem;
    }
    
    .container {
        padding: 0 0.75rem;
    }
}

/* Touch-friendly buttons */
button, .btn, a[role="button"] {
    min-height: 44px;
    min-width: 44px;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    touch-action: manipulation;
    transition: all 0.3s ease;
    font-size: 1rem;
    line-height: 1.2;
}

button:hover, .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

button:active, .btn:active {
    transform: translateY(0);
}

/* Mobile-first navigation */
.nav-mobile {
    display: none;
}

@media (max-width: 768px) {
    .nav-desktop {
        display: none;
    }
    
    .nav-mobile {
        display: block;
    }
    
    .nav-menu {
        position: fixed;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100vh;
        background: white;
        transition: left 0.3s ease;
        z-index: 1000;
        padding: 2rem;
    }
    
    .nav-menu.active {
        left: 0;
    }
    
    .nav-toggle {
        display: block;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }
}

/* Responsive images */
img {
    max-width: 100%;
    height: auto;
    display: block;
}

.responsive-img {
    width: 100%;
    height: auto;
    object-fit: cover;
}

/* Cards and components */
.card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 12px rgba(0,0,0,0.1);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

@media (max-width: 768px) {
    .card {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 8px;
    }
}

/* Performance optimizations */
.lazy-load {
    opacity: 0;
    transition: opacity 0.3s ease;
}

.lazy-load.loaded {
    opacity: 1;
}

/* Accessibility improvements */
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
}

/* Focus indicators */
*:focus {
    outline: 2px solid #007acc;
    outline-offset: 2px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    :root {
        --bg-color: #1a1a1a;
        --text-color: #ffffff;
        --card-bg: #2d2d2d;
    }
    
    body {
        background-color: var(--bg-color);
        color: var(--text-color);
    }
    
    .card {
        background-color: var(--card-bg);
    }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* High contrast mode */
@media (prefers-contrast: high) {
    button, .btn {
        border: 2px solid;
    }
    
    .card {
        border: 1px solid;
    }
}

/* Print styles */
@media print {
    * {
        background: transparent !important;
        color: black !important;
        box-shadow: none !important;
    }
    
    .nav-menu, .nav-mobile {
        display: none !important;
    }
    
    .card {
        border: 1px solid #000;
        page-break-inside: avoid;
    }
}

/* Specific responsive breakpoints */
@media (min-width: 480px) {
    .container {
        padding: 0 1.5rem;
    }
}

@media (min-width: 768px) {
    .container {
        padding: 0 2rem;
    }
    
    .col-md-6 {
        flex: 0 0 50%;
    }
    
    .col-md-4 {
        flex: 0 0 33.333333%;
    }
    
    .col-md-3 {
        flex: 0 0 25%;
    }
}

@media (min-width: 1024px) {
    .container {
        padding: 0 3rem;
    }
    
    .col-lg-12 { flex: 0 0 100%; }
    .col-lg-6 { flex: 0 0 50%; }
    .col-lg-4 { flex: 0 0 33.333333%; }
    .col-lg-3 { flex: 0 0 25%; }
}

@media (min-width: 1200px) {
    .container {
        max-width: 1200px;
    }
}

/* Utility classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }

.d-none { display: none; }
.d-block { display: block; }
.d-flex { display: flex; }

@media (max-width: 767px) {
    .d-md-none { display: none; }
    .d-md-block { display: block; }
}

.mb-1 { margin-bottom: 0.5rem; }
.mb-2 { margin-bottom: 1rem; }
.mb-3 { margin-bottom: 1.5rem; }
.mb-4 { margin-bottom: 2rem; }

.mt-1 { margin-top: 0.5rem; }
.mt-2 { margin-top: 1rem; }
.mt-3 { margin-top: 1.5rem; }
.mt-4 { margin-top: 2rem; }

.p-1 { padding: 0.5rem; }
.p-2 { padding: 1rem; }
.p-3 { padding: 1.5rem; }
.p-4 { padding: 2rem; }
`;

        fs.writeFileSync(cssPath, responsiveCSS);
        this.log('Created comprehensive responsive CSS');
    }

    async optimizeJavaScript() {
        this.log('Starting JavaScript responsive optimization...');
        
        const jsPath = 'assets/responsive-script.js';
        
        const responsiveJS = `
/**
 * RESPONSIVE OPTIMIZATION SCRIPT
 * Enhanced mobile experience and performance
 */

class ResponsiveManager {
    constructor() {
        this.breakpoints = {
            mobile: 480,
            tablet: 768,
            desktop: 1024,
            large: 1200
        };
        
        this.currentBreakpoint = this.getCurrentBreakpoint();
        this.init();
    }

    init() {
        this.setupViewportHandler();
        this.setupLazyLoading();
        this.setupTouchOptimizations();
        this.setupPerformanceMonitoring();
        this.setupAccessibilityFeatures();
        
        // Initialize on DOM ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.onReady());
        } else {
            this.onReady();
        }
    }

    onReady() {
        this.optimizeImages();
        this.setupMobileNavigation();
        this.setupFormOptimizations();
        this.setupScrollOptimizations();
    }

    getCurrentBreakpoint() {
        const width = window.innerWidth;
        if (width >= this.breakpoints.large) return 'large';
        if (width >= this.breakpoints.desktop) return 'desktop';
        if (width >= this.breakpoints.tablet) return 'tablet';
        return 'mobile';
    }

    setupViewportHandler() {
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => {
                const newBreakpoint = this.getCurrentBreakpoint();
                if (newBreakpoint !== this.currentBreakpoint) {
                    this.currentBreakpoint = newBreakpoint;
                    this.onBreakpointChange(newBreakpoint);
                }
            }, 150);
        });
    }

    onBreakpointChange(breakpoint) {
        document.body.className = document.body.className.replace(/bp-\\w+/g, '');
        document.body.classList.add(\`bp-\${breakpoint}\`);
        
        // Trigger custom event
        window.dispatchEvent(new CustomEvent('breakpointChange', {
            detail: { breakpoint }
        }));
    }

    setupLazyLoading() {
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src || img.src;
                        img.classList.add('loaded');
                        observer.unobserve(img);
                    }
                });
            }, {
                rootMargin: '50px'
            });

            document.querySelectorAll('img[data-src], .lazy-load').forEach(img => {
                imageObserver.observe(img);
            });
        }
    }

    setupTouchOptimizations() {
        // Enhance touch targets
        document.querySelectorAll('button, .btn, a[role="button"]').forEach(element => {
            if (!element.style.minHeight) {
                element.style.minHeight = '44px';
                element.style.minWidth = '44px';
            }
        });

        // Improve touch feedback
        let touchStartTime;
        document.addEventListener('touchstart', (e) => {
            touchStartTime = Date.now();
        }, { passive: true });

        document.addEventListener('touchend', (e) => {
            const touchDuration = Date.now() - touchStartTime;
            if (touchDuration < 200) {
                e.target.classList.add('touch-feedback');
                setTimeout(() => {
                    e.target.classList.remove('touch-feedback');
                }, 150);
            }
        }, { passive: true });
    }

    setupMobileNavigation() {
        const navToggle = document.querySelector('.nav-toggle');
        const navMenu = document.querySelector('.nav-menu');
        
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
                navToggle.setAttribute('aria-expanded', 
                    navMenu.classList.contains('active'));
            });

            // Close menu on outside click
            document.addEventListener('click', (e) => {
                if (!navMenu.contains(e.target) && !navToggle.contains(e.target)) {
                    navMenu.classList.remove('active');
                    navToggle.setAttribute('aria-expanded', 'false');
                }
            });
        }
    }

    optimizeImages() {
        // Convert images to WebP if supported
        const supportsWebP = () => {
            const canvas = document.createElement('canvas');
            return canvas.toDataURL('image/webp').indexOf('image/webp') === 5;
        };

        if (supportsWebP()) {
            document.querySelectorAll('img').forEach(img => {
                const webpSrc = img.src.replace(/\\.(jpg|jpeg|png)$/i, '.webp');
                
                // Test if WebP version exists
                const testImg = new Image();
                testImg.onload = () => {
                    img.src = webpSrc;
                };
                testImg.src = webpSrc;
            });
        }
    }

    setupFormOptimizations() {
        // Enhanced form handling for mobile
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', (e) => {
                // Add loading state
                const submitBtn = form.querySelector('[type="submit"]');
                if (submitBtn) {
                    submitBtn.classList.add('loading');
                    submitBtn.disabled = true;
                }
            });
        });

        // Auto-resize textareas
        document.querySelectorAll('textarea').forEach(textarea => {
            textarea.addEventListener('input', () => {
                textarea.style.height = 'auto';
                textarea.style.height = textarea.scrollHeight + 'px';
            });
        });
    }

    setupScrollOptimizations() {
        let scrollTimeout;
        let isScrolling = false;

        window.addEventListener('scroll', () => {
            if (!isScrolling) {
                document.body.classList.add('scrolling');
                isScrolling = true;
            }

            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                document.body.classList.remove('scrolling');
                isScrolling = false;
            }, 150);
        }, { passive: true });
    }

    setupPerformanceMonitoring() {
        // Monitor Core Web Vitals
        if ('PerformanceObserver' in window) {
            // Largest Contentful Paint
            new PerformanceObserver((entryList) => {
                const entries = entryList.getEntries();
                const lastEntry = entries[entries.length - 1];
                console.log('LCP:', lastEntry.startTime);
            }).observe({ entryTypes: ['largest-contentful-paint'] });

            // First Input Delay
            new PerformanceObserver((entryList) => {
                const entries = entryList.getEntries();
                entries.forEach(entry => {
                    console.log('FID:', entry.processingStart - entry.startTime);
                });
            }).observe({ entryTypes: ['first-input'] });

            // Cumulative Layout Shift
            new PerformanceObserver((entryList) => {
                let cls = 0;
                entryList.getEntries().forEach(entry => {
                    if (!entry.hadRecentInput) {
                        cls += entry.value;
                    }
                });
                console.log('CLS:', cls);
            }).observe({ entryTypes: ['layout-shift'] });
        }
    }

    setupAccessibilityFeatures() {
        // Keyboard navigation enhancement
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                document.body.classList.add('keyboard-navigation');
            }
        });

        document.addEventListener('mousedown', () => {
            document.body.classList.remove('keyboard-navigation');
        });

        // Skip link for screen readers
        if (!document.querySelector('.skip-link')) {
            const skipLink = document.createElement('a');
            skipLink.href = '#main-content';
            skipLink.className = 'skip-link sr-only';
            skipLink.textContent = 'Skip to main content';
            skipLink.addEventListener('focus', () => {
                skipLink.classList.remove('sr-only');
            });
            skipLink.addEventListener('blur', () => {
                skipLink.classList.add('sr-only');
            });
            document.body.insertBefore(skipLink, document.body.firstChild);
        }
    }

    // Public API
    getBreakpoint() {
        return this.currentBreakpoint;
    }

    isMobile() {
        return this.currentBreakpoint === 'mobile';
    }

    isTablet() {
        return this.currentBreakpoint === 'tablet';
    }

    isDesktop() {
        return this.currentBreakpoint === 'desktop' || this.currentBreakpoint === 'large';
    }
}

// Initialize responsive manager
const responsiveManager = new ResponsiveManager();

// Export for use in other scripts
window.ResponsiveManager = ResponsiveManager;
window.responsiveManager = responsiveManager;

// CSS for touch feedback
const touchStyles = document.createElement('style');
touchStyles.textContent = \`
.touch-feedback {
    transform: scale(0.95);
    opacity: 0.8;
    transition: all 0.1s ease;
}

.keyboard-navigation *:focus {
    outline: 2px solid #007acc !important;
    outline-offset: 2px !important;
}

.skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: #000;
    color: #fff;
    padding: 8px;
    text-decoration: none;
    z-index: 1000;
    border-radius: 0 0 4px 4px;
}

.skip-link:focus {
    top: 0;
}

.scrolling {
    pointer-events: none;
}

.scrolling * {
    pointer-events: auto;
}

.loading {
    position: relative;
    color: transparent !important;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #ccc;
    border-radius: 50%;
    border-top-color: #007acc;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}
\`;
document.head.appendChild(touchStyles);
`;

        fs.writeFileSync(jsPath, responsiveJS);
        this.log('Created responsive JavaScript optimization');
    }

    async updateMainHTML() {
        this.log('Updating main HTML with responsive optimizations...');
        
        const htmlPath = 'index.html';
        let html = fs.readFileSync(htmlPath, 'utf8');

        // Add responsive CSS link
        if (!html.includes('responsive-optimized.css')) {
            html = html.replace(
                '</head>',
                '    <link rel="stylesheet" href="assets/css/responsive-optimized.css">\n</head>'
            );
        }

        // Add responsive script
        if (!html.includes('responsive-script.js')) {
            html = html.replace(
                '</body>',
                '    <script src="assets/responsive-script.js"></script>\n</body>'
            );
        }

        // Add main content landmark
        if (!html.includes('id="main-content"')) {
            html = html.replace(
                '<main',
                '<main id="main-content"'
            );
        }

        fs.writeFileSync(htmlPath, html);
        this.log('Updated main HTML with responsive features');
    }

    async generateReport() {
        const endTime = Date.now();
        const duration = endTime - this.startTime;

        const report = {
            timestamp: new Date().toISOString(),
            duration: duration,
            optimizations: this.results.optimizations,
            errors: this.results.errors,
            warnings: this.results.warnings,
            metrics: {
                totalOptimizations: this.results.optimizations.length,
                totalErrors: this.results.errors.length,
                totalWarnings: this.results.warnings.length
            },
            recommendations: [
                'Test responsive design on multiple devices',
                'Validate touch interactions on mobile devices',
                'Monitor Core Web Vitals after deployment',
                'Test accessibility with screen readers',
                'Verify performance on slow connections'
            ]
        };

        fs.writeFileSync('responsive-optimization-report.json', JSON.stringify(report, null, 2));
        this.log(`Responsive optimization completed in ${duration}ms`);
        
        console.log('\n=== RESPONSIVE OPTIMIZATION REPORT ===');
        console.log(`✅ Total optimizations applied: ${report.metrics.totalOptimizations}`);
        console.log(`⚠️  Warnings: ${report.metrics.totalWarnings}`);
        console.log(`❌ Errors: ${report.metrics.totalErrors}`);
        console.log(`⏱️  Duration: ${duration}ms`);
        
        if (report.errors.length > 0) {
            console.log('\nErrors:');
            report.errors.forEach(error => console.log(`  - ${error}`));
        }
        
        if (report.warnings.length > 0) {
            console.log('\nWarnings:');
            report.warnings.forEach(warning => console.log(`  - ${warning}`));
        }
        
        console.log('\nRecommendations:');
        report.recommendations.forEach(rec => console.log(`  - ${rec}`));
        
        return report;
    }

    async run() {
        try {
            this.log('Starting comprehensive responsive optimization...');
            
            await this.optimizeHTML();
            await this.optimizeCSS();
            await this.optimizeJavaScript();
            await this.updateMainHTML();
            
            const report = await this.generateReport();
            
            this.log('🚀 Responsive optimization completed successfully!');
            return report;
            
        } catch (error) {
            this.log(`Fatal error: ${error.message}`, 'error');
            throw error;
        }
    }
}

// Run if called directly
if (require.main === module) {
    const optimizer = new ResponsiveOptimizer();
    optimizer.run().catch(console.error);
}

module.exports = ResponsiveOptimizer;
